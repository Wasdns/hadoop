{
    "additionalProperties": false, 
    "definitions": {
        "DirectMatchStageTable": {
            "additionalProperties": false, 
            "required": [
                "stage_table_type", 
                "stage_number", 
                "logical_table_id", 
                "size", 
                "memory_resource_allocation", 
                "hash_functions", 
                "result_physical_buses", 
                "has_attached_gateway", 
                "ways", 
                "action_format", 
                "stash_allocation", 
                "default_next_table"
            ], 
            "type": "object", 
            "properties": {
                "stash_allocation": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/StashAllocation"
                        }, 
                        {
                            "type": "null"
                        }
                    ]
                }, 
                "default_next_table": {
                    "oneOf": [
                        {
                            "type": "integer"
                        }, 
                        {
                            "type": "null"
                        }
                    ], 
                    "description": "Full address of the default next table, if any."
                }, 
                "has_attached_gateway": {
                    "type": "boolean", 
                    "description": "A Boolean indicating if this stage table has an attached gateway."
                }, 
                "action_format": {
                    "items": {
                        "$ref": "#/definitions/ActionHandleFormat"
                    }, 
                    "type": "array", 
                    "description": "List of action handles for this exact match stage table."
                }, 
                "memory_resource_allocation": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/HashMatchMemoryResourceAllocation"
                        }, 
                        {
                            "type": "null"
                        }
                    ]
                }, 
                "pack_format": {
                    "items": {
                        "required": [
                            "memory_word_width", 
                            "table_word_width", 
                            "entries_per_table_word", 
                            "number_memory_units_per_table_word"
                        ], 
                        "type": "object", 
                        "description": "Structure containing information about how the memory for this stage table is layed out.", 
                        "properties": {
                            "memory_word_width": {
                                "type": "integer", 
                                "description": "Bit width of a single physical memory word."
                            }, 
                            "table_word_width": {
                                "type": "integer", 
                                "description": "Bit width of the table's word."
                            }, 
                            "entries_per_table_word": {
                                "type": "integer", 
                                "description": "Number of entries that are packed into a given table word."
                            }, 
                            "number_memory_units_per_table_word": {
                                "type": "integer", 
                                "description": "Number of units combined together to form a single table word. Notice that for table words that occupy multiple memory units, the most significant bits of the table word are found in the lowest indexed memory unit."
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "idletime_stage_table": {
                    "$ref": "#/definitions/IdletimeStageTable"
                }, 
                "hash_functions": {
                    "items": {
                        "$ref": "#/definitions/HashFunction"
                    }, 
                    "type": "array", 
                    "description": "Array of hash functions for this match table."
                }, 
                "ways": {
                    "items": {
                        "$ref": "#/definitions/HashWayStageTable"
                    }, 
                    "type": "array", 
                    "description": "Context information for each particular way in this exact match stage table."
                }, 
                "result_physical_buses": {
                    "items": {
                        "type": "integer"
                    }, 
                    "type": "array", 
                    "description": "An array of integers corresponding to the physical bus numbers used by this stage table. This information is required for snapshot."
                }, 
                "logical_table_id": {
                    "type": "integer", 
                    "description": "Unique identifier for this logical table within this stage."
                }, 
                "stage_table_type": {
                    "enum": [
                        "direct_match"
                    ], 
                    "type": "string", 
                    "description": "Type of exact match stage table."
                }, 
                "stage_number": {
                    "type": "integer", 
                    "description": "Number identifying the stage containing this stage table."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Number of entries in this stage table."
                }
            }
        }, 
        "HashWayStageTable": {
            "additionalProperties": false, 
            "required": [
                "stage_table_type", 
                "stage_number", 
                "size", 
                "memory_resource_allocation", 
                "way_number"
            ], 
            "type": "object", 
            "properties": {
                "way_number": {
                    "type": "integer", 
                    "description": "The number identifying this hash way."
                }, 
                "memory_resource_allocation": {
                    "oneOf": [
                        {
                            "additionalProperties": false, 
                            "required": [
                                "memory_units_and_vpns", 
                                "hash_function_id", 
                                "hash_select_bit_lo", 
                                "hash_select_bit_hi", 
                                "hash_entry_bit_lo", 
                                "hash_entry_bit_hi", 
                                "number_select_bits", 
                                "number_entry_bits"
                            ], 
                            "type": "object", 
                            "properties": {
                                "number_select_bits": {
                                    "type": "integer", 
                                    "description": "Number of hash bits used for selecting the RAM. Values allowed: 0-12 (inclusive)."
                                }, 
                                "hash_select_bit_hi": {
                                    "type": "integer", 
                                    "description": "Position of the most significant bit boundary in the 52-bit hash value to use to activate a RAM unit. Values allowed: 40-51 (inclusive)."
                                }, 
                                "number_entry_bits": {
                                    "enum": [
                                        10
                                    ], 
                                    "type": "integer", 
                                    "description": "Number of hash bits used for selecting the word in a RAM."
                                }, 
                                "hash_entry_bit_lo": {
                                    "enum": [
                                        0, 
                                        10, 
                                        20, 
                                        30, 
                                        40
                                    ], 
                                    "type": "integer", 
                                    "description": "Position of the least significant bit boundary in the 52-bit hash value to use to determine a RAM unit row."
                                }, 
                                "hash_select_bit_lo": {
                                    "type": "integer", 
                                    "description": "Position of the least significant bit boundary in the 52-bit hash value to use to activate a RAM unit. Value allowed: 40-51 (inclusive)."
                                }, 
                                "hash_entry_bit_hi": {
                                    "enum": [
                                        9, 
                                        19, 
                                        29, 
                                        39, 
                                        49
                                    ], 
                                    "type": "integer", 
                                    "description": "Position of the most significant bit boundary in the 52-bit hash value to use to determine a RAM unit row."
                                }, 
                                "memory_units_and_vpns": {
                                    "items": {
                                        "required": [
                                            "memory_units", 
                                            "vpns"
                                        ], 
                                        "type": "object", 
                                        "properties": {
                                            "memory_units": {
                                                "items": {
                                                    "type": "integer"
                                                }, 
                                                "type": "array", 
                                                "description": "An array of SRAM memory unit IDs.  The memory unit ID is 12 * row + col.  Memory IDs are ordered such that the most significant memory appears at the lower list index.  Memory IDs are ordered such that the most significant memory appears at the lower list index."
                                            }, 
                                            "vpns": {
                                                "items": {
                                                    "type": "integer"
                                                }, 
                                                "type": "array", 
                                                "description": "An array of VPNs assigned for the match entries packed in these memory units."
                                            }
                                        }
                                    }, 
                                    "type": "array", 
                                    "description": "Memory resource allocation information in this ExactMatchStageTable."
                                }, 
                                "hash_function_id": {
                                    "type": "integer", 
                                    "description": "Hash function ID that is used to compute the RAM enable select bits and the RAM word entry bits."
                                }
                            }
                        }, 
                        {
                            "type": "null"
                        }
                    ]
                }, 
                "pack_format": {
                    "items": {
                        "required": [
                            "memory_word_width", 
                            "table_word_width", 
                            "entries", 
                            "entries_per_table_word", 
                            "number_memory_units_per_table_word"
                        ], 
                        "type": "object", 
                        "description": "Structure containing information about how the memory for this stage table is layed out.", 
                        "properties": {
                            "memory_word_width": {
                                "type": "integer", 
                                "description": "Bit width of a single physical memory word."
                            }, 
                            "table_word_width": {
                                "type": "integer", 
                                "description": "Bit width of the table's word."
                            }, 
                            "number_memory_units_per_table_word": {
                                "type": "integer", 
                                "description": "Number of units combined together to form a single table word. Notice that for table words that occupy multiple memory units, the most significant bits of the table word are found in the lowest indexed memory unit."
                            }, 
                            "entries_per_table_word": {
                                "type": "integer", 
                                "description": "Number of entries that are packed into a given table word."
                            }, 
                            "entries": {
                                "items": {
                                    "additionalProperties": false, 
                                    "required": [
                                        "entry_number", 
                                        "fields"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "entry_number": {
                                            "type": "integer", 
                                            "description": "Entry number uniquely identifying this entry."
                                        }, 
                                        "fields": {
                                            "items": {
                                                "required": [
                                                    "lsb_mem_word_offset", 
                                                    "source", 
                                                    "start_bit", 
                                                    "msb_mem_word_idx", 
                                                    "lsb_mem_word_idx", 
                                                    "field_width", 
                                                    "field_name", 
                                                    "enable_pfe"
                                                ], 
                                                "type": "object", 
                                                "properties": {
                                                    "start_bit": {
                                                        "type": "integer", 
                                                        "description": "A field could be split in multiple slices. Corresponds to the offset, from the least significant bit, where this slice starts."
                                                    }, 
                                                    "immediate_name": {
                                                        "type": "string", 
                                                        "description": "Name of the [source] field, if it was an IMMEDIATE source."
                                                    }, 
                                                    "field_width": {
                                                        "type": "integer", 
                                                        "description": "Width of a field, in bits."
                                                    }, 
                                                    "lsb_mem_word_idx": {
                                                        "type": "integer", 
                                                        "description": "Index of the wide word containing the least significant bit of this field."
                                                    }, 
                                                    "match_mode": {
                                                        "enum": [
                                                            "exact", 
                                                            "s0q1", 
                                                            "s1q0", 
                                                            "unused"
                                                        ], 
                                                        "type": "string", 
                                                        "description": "Indicates the how the hardware is configured to match on this region.  Only applicable when the source is SPEC and for ATCAM tables."
                                                    }, 
                                                    "source": {
                                                        "enum": [
                                                            "zero", 
                                                            "version", 
                                                            "instr", 
                                                            "adt_ptr", 
                                                            "meter_ptr", 
                                                            "stats_ptr", 
                                                            "stful_ptr", 
                                                            "sel_ptr", 
                                                            "next_table", 
                                                            "selection_length", 
                                                            "selection_length_shift", 
                                                            "proxy_hash", 
                                                            "spec", 
                                                            "immediate"
                                                        ], 
                                                        "type": "string", 
                                                        "description": "Type of source that originated this entry."
                                                    }, 
                                                    "msb_mem_word_idx": {
                                                        "type": "integer", 
                                                        "description": "Index of the wide word containing the most significant bit of this field."
                                                    }, 
                                                    "lsb_mem_word_offset": {
                                                        "type": "integer", 
                                                        "description": "Offset, within a table word, corresponding to the start of this field, starting from the least significant bit."
                                                    }, 
                                                    "field_name": {
                                                        "type": "string", 
                                                        "description": "Name of this field."
                                                    }, 
                                                    "enable_pfe": {
                                                        "type": "boolean", 
                                                        "description": "Whether to enable or disable per flow enable functionality on this entry."
                                                    }
                                                }
                                            }, 
                                            "type": "array"
                                        }
                                    }
                                }, 
                                "type": "array", 
                                "description": "Entries packed in this stage table's memory."
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "logical_table_id": {
                    "type": "integer", 
                    "description": "Unique identifier for this stage table within the stage. This is not required for Phase0."
                }, 
                "stage_table_type": {
                    "enum": [
                        "hash_way"
                    ], 
                    "type": "string", 
                    "description": "Type of stage table."
                }, 
                "stage_number": {
                    "type": "integer", 
                    "description": "Number identifying the stage containing this stage table."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Number of entries in this stage table."
                }
            }
        }, 
        "StatefulAluDetails": {
            "additionalProperties": false, 
            "required": [
                "name", 
                "single_bit_mode"
            ], 
            "type": "object", 
            "properties": {
                "update_lo_2_predicate": {
                    "$ref": "#/definitions/StatefulAluExpressionDetails"
                }, 
                "update_lo_2_value": {
                    "$ref": "#/definitions/StatefulAluExpressionDetails"
                }, 
                "update_lo_1_predicate": {
                    "$ref": "#/definitions/StatefulAluExpressionDetails"
                }, 
                "update_hi_2_value": {
                    "$ref": "#/definitions/StatefulAluExpressionDetails"
                }, 
                "update_hi_1_predicate": {
                    "$ref": "#/definitions/StatefulAluExpressionDetails"
                }, 
                "condition_lo": {
                    "$ref": "#/definitions/StatefulAluExpressionDetails"
                }, 
                "update_lo_1_value": {
                    "$ref": "#/definitions/StatefulAluExpressionDetails"
                }, 
                "output_dst": {
                    "type": "string", 
                    "description": "The name of the field to write the output result to."
                }, 
                "output_predicate": {
                    "$ref": "#/definitions/StatefulAluExpressionDetails"
                }, 
                "update_hi_2_predicate": {
                    "$ref": "#/definitions/StatefulAluExpressionDetails"
                }, 
                "output_value": {
                    "$ref": "#/definitions/StatefulAluExpressionDetails"
                }, 
                "initial_value_lo": {
                    "type": "integer", 
                    "description": "Initial value to use for memory lo in all table entries."
                }, 
                "single_bit_mode": {
                    "type": "boolean", 
                    "description": "A Boolean indicating if this expression is operating in single-bit mode."
                }, 
                "condition_hi": {
                    "$ref": "#/definitions/StatefulAluExpressionDetails"
                }, 
                "initial_value_hi": {
                    "type": "integer", 
                    "description": "Initial value to use for memory hi in all table entries (only applicable in dual-width mode)."
                }, 
                "update_hi_1_value": {
                    "$ref": "#/definitions/StatefulAluExpressionDetails"
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of the stateful ALU instruction being run (the blackbox name)."
                }
            }
        }, 
        "RamUsage": {
            "additionalProperties": false, 
            "required": [
                "row", 
                "column", 
                "usages"
            ], 
            "type": "object", 
            "properties": {
                "column": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3, 
                        4, 
                        5, 
                        6, 
                        7, 
                        8, 
                        9
                    ], 
                    "type": "integer", 
                    "description": "The physical column this RAM is on."
                }, 
                "usages": {
                    "items": {
                        "$ref": "#/definitions/ElementUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of how this RAM unit is used."
                }, 
                "row": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3, 
                        4, 
                        5, 
                        6, 
                        7
                    ], 
                    "type": "integer", 
                    "description": "The physical row this RAM is on."
                }
            }
        }, 
        "ProxyHashMatchStageTable": {
            "additionalProperties": false, 
            "required": [
                "stage_table_type", 
                "stage_number", 
                "logical_table_id", 
                "size", 
                "memory_resource_allocation", 
                "hash_functions", 
                "result_physical_buses", 
                "has_attached_gateway", 
                "ways", 
                "action_format", 
                "stash_allocation", 
                "default_next_table", 
                "proxy_hash_bit_width", 
                "proxy_hash_function"
            ], 
            "type": "object", 
            "properties": {
                "stash_allocation": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/StashAllocation"
                        }, 
                        {
                            "type": "null"
                        }
                    ]
                }, 
                "default_next_table": {
                    "oneOf": [
                        {
                            "type": "integer"
                        }, 
                        {
                            "type": "null"
                        }
                    ], 
                    "description": "Full address of the default next table, if any."
                }, 
                "proxy_hash_function": {
                    "$ref": "#/definitions/HashFunction"
                }, 
                "has_attached_gateway": {
                    "type": "boolean", 
                    "description": "A Boolean indicating if this stage table has an attached gateway."
                }, 
                "action_format": {
                    "items": {
                        "$ref": "#/definitions/ActionHandleFormat"
                    }, 
                    "type": "array", 
                    "description": "List of action handles for this exact match stage table."
                }, 
                "memory_resource_allocation": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/HashMatchMemoryResourceAllocation"
                        }, 
                        {
                            "type": "null"
                        }
                    ]
                }, 
                "pack_format": {
                    "items": {
                        "required": [
                            "memory_word_width", 
                            "table_word_width", 
                            "entries_per_table_word", 
                            "number_memory_units_per_table_word"
                        ], 
                        "type": "object", 
                        "description": "Structure containing information about how the memory for this stage table is layed out.", 
                        "properties": {
                            "memory_word_width": {
                                "type": "integer", 
                                "description": "Bit width of a single physical memory word."
                            }, 
                            "table_word_width": {
                                "type": "integer", 
                                "description": "Bit width of the table's word."
                            }, 
                            "entries_per_table_word": {
                                "type": "integer", 
                                "description": "Number of entries that are packed into a given table word."
                            }, 
                            "number_memory_units_per_table_word": {
                                "type": "integer", 
                                "description": "Number of units combined together to form a single table word. Notice that for table words that occupy multiple memory units, the most significant bits of the table word are found in the lowest indexed memory unit."
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "idletime_stage_table": {
                    "$ref": "#/definitions/IdletimeStageTable"
                }, 
                "hash_functions": {
                    "items": {
                        "$ref": "#/definitions/HashFunction"
                    }, 
                    "type": "array", 
                    "description": "Array of hash functions for this match table."
                }, 
                "proxy_hash_algorithm": {
                    "type": "string", 
                    "description": "The name of the hash algorithm used to compute the proxy value."
                }, 
                "ways": {
                    "items": {
                        "$ref": "#/definitions/HashWayStageTable"
                    }, 
                    "type": "array", 
                    "description": "Context information for each particular way in this exact match stage table."
                }, 
                "proxy_hash_bit_width": {
                    "type": "integer", 
                    "description": "An integer indicating the bit width of proxy value stored in place of the normal exact match key."
                }, 
                "result_physical_buses": {
                    "items": {
                        "type": "integer"
                    }, 
                    "type": "array", 
                    "description": "An array of integers corresponding to the physical bus numbers used by this stage table. This information is required for snapshot."
                }, 
                "logical_table_id": {
                    "type": "integer", 
                    "description": "Unique identifier for this logical table within this stage."
                }, 
                "stage_table_type": {
                    "enum": [
                        "proxy_hash_match"
                    ], 
                    "type": "string", 
                    "description": "Type of exact match stage table."
                }, 
                "stage_number": {
                    "type": "integer", 
                    "description": "Number identifying the stage containing this stage table."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Number of entries in this stage table."
                }
            }
        }, 
        "HashBitsResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "nBits", 
                "nFunctions", 
                "bits"
            ], 
            "type": "object", 
            "properties": {
                "nBits": {
                    "type": "integer", 
                    "description": "Number of hash bits for a hash function."
                }, 
                "bits": {
                    "items": {
                        "$ref": "#/definitions/HashBitUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of used hash bits."
                }, 
                "nFunctions": {
                    "type": "integer", 
                    "description": "Number of hash functions."
                }
            }
        }, 
        "ConfigurationValue": {
            "additionalProperties": false, 
            "required": [
                "name", 
                "value"
            ], 
            "type": "object", 
            "properties": {
                "fully_qualified_name": {
                    "type": "string", 
                    "description": "Fully qualified name in the register hierarchy."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Unique name given, preferably device agnostic."
                }, 
                "value": {
                    "type": "string", 
                    "description": "A hexadecimal string representation of the configuration value."
                }
            }
        }, 
        "StatefulTable": {
            "additionalProperties": false, 
            "required": [
                "name", 
                "handle", 
                "size", 
                "direction", 
                "table_type", 
                "how_referenced", 
                "dual_width_mode", 
                "alu_width", 
                "initial_value_lo", 
                "action_to_stateful_instruction_slot", 
                "stage_tables"
            ], 
            "type": "object", 
            "properties": {
                "dual_width_mode": {
                    "type": "boolean", 
                    "description": "A Boolean indicating if this stateful table operates in dual-width mode."
                }, 
                "bound_to_selection_table_handle": {
                    "type": "integer", 
                    "description": "An integer indicating the selection table handle this is bound to, if any.  A stateful table is bound to a selector in cases where a packet generator packet is used to update the live port members."
                }, 
                "direction": {
                    "enum": [
                        "ingress", 
                        "egress"
                    ], 
                    "type": "string", 
                    "description": "Whether this table is used for ingress or egress."
                }, 
                "handle": {
                    "type": "integer", 
                    "description": "Unique identifier for this table."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of this table."
                }, 
                "stateful_counter_index": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3
                    ], 
                    "type": "integer", 
                    "description": "An integer that indicates the counter set used for this stateful log, fifo, or stack"
                }, 
                "table_type": {
                    "enum": [
                        "stateful"
                    ], 
                    "type": "string", 
                    "description": "Type of table."
                }, 
                "how_referenced": {
                    "enum": [
                        "direct", 
                        "indirect"
                    ], 
                    "type": "string", 
                    "description": "Whether the table is directly or indirectly referenced."
                }, 
                "stateful_table_type": {
                    "enum": [
                        "normal", 
                        "log", 
                        "fifo", 
                        "stack", 
                        "bloom_clear"
                    ], 
                    "type": "string", 
                    "description": "Type of stateful table."
                }, 
                "stateful_direction": {
                    "enum": [
                        "in", 
                        "out", 
                        "inout"
                    ], 
                    "type": "string", 
                    "description": "Direction of dataplane accesses to a fifo or stack"
                }, 
                "initial_value_lo": {
                    "type": "number", 
                    "description": "An integer indicating the initial value to use for the stateful word.  If the stateful table is not in dual-width mode, this is the initial value for the entire stateful word.  If no initial value was specified, 0 will be used."
                }, 
                "clr_instr": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3
                    ], 
                    "type": "integer", 
                    "description": "An integer indicating which stateful ALU instruction number contains a clear bit instruction.  This is only applicable in single bit mode.  The driver uses this when creating the stateful ALU address."
                }, 
                "action_to_stateful_instruction_slot": {
                    "items": {
                        "required": [
                            "instruction_slot", 
                            "action_handle"
                        ], 
                        "type": "object", 
                        "description": "A dictionary that maps action handles to the stateful ALU instruction slot used by that action, if any.  This is used by the driver to help encode the stateful ALU address.", 
                        "properties": {
                            "instruction_slot": {
                                "type": "integer", 
                                "description": "Stateful ALU instruction slot used by the action."
                            }, 
                            "action_handle": {
                                "type": "integer", 
                                "description": "Unique identifier for an action."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "List of dictionaries containing action handles and their corresponding stateful ALU instruction, if any."
                }, 
                "clr_instr_adjust_total": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3
                    ], 
                    "type": "integer", 
                    "description": "An integer indicating which stateful ALU instruction number contains a clear bit adjust total instruction.  This is only applicable in single bit mode.  The driver uses this when creating the stateful ALU address."
                }, 
                "stage_tables": {
                    "items": {
                        "$ref": "#/definitions/StatefulStageTable"
                    }, 
                    "type": "array", 
                    "description": "An array of stage-specific resource objects for this stateful table."
                }, 
                "initial_value_hi": {
                    "type": "number", 
                    "description": "An integer indicating the initial value to use for the most significant half of the stateful word.  This is only valid in double-width mode.  If no initial value was specified, 0 will be used."
                }, 
                "set_instr_adjust_total": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3
                    ], 
                    "type": "integer", 
                    "description": "An integer indicating which stateful ALU instruction number contains a set bit adjust total instruction.  This is only applicable in single bit mode.  The driver uses this when creating the stateful ALU address."
                }, 
                "alu_width": {
                    "enum": [
                        1, 
                        8, 
                        16, 
                        32
                    ], 
                    "type": "integer", 
                    "description": "An integer indicating the stateful ALU data path width.  Normally, this corresponds to the memory entry width, but for dual-width mode, the memory entry width is twice this value. "
                }, 
                "set_instr": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3
                    ], 
                    "type": "integer", 
                    "description": "An integer indicating which stateful ALU instruction number contains a set bit instruction.  This is only applicable in single bit mode.  The driver uses this when creating the stateful ALU address."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Minimum size of this table, as specified in P4."
                }
            }
        }, 
        "GatewayResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "nRows", 
                "nUnits", 
                "gateways"
            ], 
            "type": "object", 
            "properties": {
                "nRows": {
                    "type": "integer", 
                    "description": "Total number of rows."
                }, 
                "nUnits": {
                    "type": "integer", 
                    "description": "Total number of units per row."
                }, 
                "gateways": {
                    "items": {
                        "$ref": "#/definitions/GatewayUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of used Gateways."
                }
            }
        }, 
        "LogicalTableResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "size", 
                "ids"
            ], 
            "type": "object", 
            "properties": {
                "ids": {
                    "items": {
                        "$ref": "#/definitions/LogicalTableUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of used logical table IDs."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Total number of ids."
                }
            }
        }, 
        "StashResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "nRows", 
                "nUnits", 
                "stashes"
            ], 
            "type": "object", 
            "properties": {
                "nRows": {
                    "type": "integer", 
                    "description": "Total number of rows."
                }, 
                "nUnits": {
                    "type": "integer", 
                    "description": "Total number of units per row."
                }, 
                "stashes": {
                    "items": {
                        "$ref": "#/definitions/StashUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of used Stashes."
                }
            }
        }, 
        "MatchWithNoKeyTableAttr": {
            "additionalProperties": false, 
            "required": [
                "match_type", 
                "stage_tables"
            ], 
            "type": "object", 
            "properties": {
                "stage_tables": {
                    "items": {
                        "$ref": "#/definitions/MatchWithNoKeyStageTable"
                    }, 
                    "type": "array", 
                    "description": "An array of stage-specific resource objects for this match table. Keyless match tables should have only one of these."
                }, 
                "match_type": {
                    "enum": [
                        "match_with_no_key"
                    ], 
                    "type": "string", 
                    "description": "Type of match table."
                }
            }
        }, 
        "XbarByteUsage": {
            "additionalProperties": false, 
            "required": [
                "byte_number", 
                "byte_type", 
                "usages"
            ], 
            "type": "object", 
            "properties": {
                "byte_number": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3, 
                        4, 
                        5, 
                        6, 
                        7, 
                        8, 
                        9, 
                        10, 
                        11, 
                        12, 
                        13, 
                        14, 
                        15, 
                        16, 
                        17, 
                        18, 
                        19, 
                        20, 
                        21, 
                        22, 
                        23, 
                        24, 
                        25, 
                        26, 
                        27, 
                        28, 
                        29, 
                        30, 
                        31, 
                        32, 
                        33, 
                        34, 
                        35, 
                        36, 
                        37, 
                        38, 
                        39, 
                        40, 
                        41, 
                        42, 
                        43, 
                        44, 
                        45, 
                        46, 
                        47, 
                        48, 
                        49, 
                        50, 
                        51, 
                        52, 
                        53, 
                        54, 
                        55, 
                        56, 
                        57, 
                        58, 
                        59, 
                        60, 
                        61, 
                        62, 
                        63, 
                        64, 
                        65, 
                        66, 
                        67, 
                        68, 
                        69, 
                        70, 
                        71, 
                        72, 
                        73, 
                        74, 
                        75, 
                        76, 
                        77, 
                        78, 
                        79, 
                        80, 
                        81, 
                        82, 
                        83, 
                        84, 
                        85, 
                        86, 
                        87, 
                        88, 
                        89, 
                        90, 
                        91, 
                        92, 
                        93, 
                        94, 
                        95, 
                        96, 
                        97, 
                        98, 
                        99, 
                        100, 
                        101, 
                        102, 
                        103, 
                        104, 
                        105, 
                        106, 
                        107, 
                        108, 
                        109, 
                        110, 
                        111, 
                        112, 
                        113, 
                        114, 
                        115, 
                        116, 
                        117, 
                        118, 
                        119, 
                        120, 
                        121, 
                        122, 
                        123, 
                        124, 
                        125, 
                        126, 
                        127, 
                        128, 
                        129, 
                        130, 
                        131, 
                        132, 
                        133, 
                        134, 
                        135, 
                        136, 
                        137, 
                        138, 
                        139, 
                        140, 
                        141, 
                        142, 
                        143, 
                        144, 
                        145, 
                        146, 
                        147, 
                        148, 
                        149, 
                        150, 
                        151, 
                        152, 
                        153, 
                        154, 
                        155, 
                        156, 
                        157, 
                        158, 
                        159, 
                        160, 
                        161, 
                        162, 
                        163, 
                        164, 
                        165, 
                        166, 
                        167, 
                        168, 
                        169, 
                        170, 
                        171, 
                        172, 
                        173, 
                        174, 
                        175, 
                        176, 
                        177, 
                        178, 
                        179, 
                        180, 
                        181, 
                        182, 
                        183, 
                        184, 
                        185, 
                        186, 
                        187, 
                        188, 
                        189, 
                        190, 
                        191, 
                        192, 
                        193
                    ], 
                    "type": "integer", 
                    "description": "Match input crossbar byte number."
                }, 
                "usages": {
                    "items": {
                        "$ref": "#/definitions/ElementUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of how this match input crossbar byte is used."
                }, 
                "byte_type": {
                    "enum": [
                        "exact", 
                        "ternary"
                    ], 
                    "type": "string", 
                    "description": "Indicates if the match input crossbar byte is in the exact or ternary region."
                }
            }
        }, 
        "ConditionTable": {
            "additionalProperties": false, 
            "required": [
                "name", 
                "handle", 
                "size", 
                "direction", 
                "table_type", 
                "condition", 
                "attached_to", 
                "stage_tables", 
                "condition_fields"
            ], 
            "type": "object", 
            "properties": {
                "direction": {
                    "enum": [
                        "ingress", 
                        "egress"
                    ], 
                    "type": "string", 
                    "description": "Whether this table is used for ingress or egress."
                }, 
                "attached_to": {
                    "oneOf": [
                        {
                            "type": "null"
                        }, 
                        {
                            "type": "string"
                        }
                    ], 
                    "description": "The name of a match table this condition table is attached to, or null if unattached."
                }, 
                "handle": {
                    "type": "integer", 
                    "description": "Unique identifier for this table."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of this table."
                }, 
                "table_type": {
                    "enum": [
                        "condition"
                    ], 
                    "type": "string", 
                    "description": "Type of table."
                }, 
                "stage_tables": {
                    "items": {
                        "$ref": "#/definitions/GatewayStageTable"
                    }, 
                    "type": "array", 
                    "description": "An array of stage-specific resource objects for this condition table."
                }, 
                "condition_fields": {
                    "items": {
                        "required": [
                            "bit_width", 
                            "name", 
                            "start_bit"
                        ], 
                        "type": "object", 
                        "properties": {
                            "bit_width": {
                                "type": "integer", 
                                "description": "The number of bits of the field involved in the condition.  If this is not the entire field, the field slice can be represented as field[start_bit + bit_width - 1 : start_bit]."
                            }, 
                            "name": {
                                "type": "string", 
                                "description": "The fully qualified name of the field."
                            }, 
                            "start_bit": {
                                "type": "integer", 
                                "description": "An integer indicating the start bit, from the least significant bit, to use for the field."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "An array of fields used by this condition."
                }, 
                "condition": {
                    "type": "string", 
                    "description": "String representation of condition from P4."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Minimum size of this table, as specified in P4."
                }
            }
        }, 
        "ParserStateResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "state_id", 
                "tcam_row", 
                "shifts", 
                "extracts", 
                "matchesOn", 
                "has_counter", 
                "state_name", 
                "next_state_id"
            ], 
            "type": "object", 
            "properties": {
                "matchesOn": {
                    "items": {
                        "required": [
                            "bit_width", 
                            "hardware_id"
                        ], 
                        "type": "object", 
                        "properties": {
                            "bit_width": {
                                "type": "integer", 
                                "description": "Size of the register."
                            }, 
                            "value_set": {
                                "type": "string", 
                                "description": "Parser value set name matched on."
                            }, 
                            "hardware_id": {
                                "type": "integer", 
                                "description": "Register ID being matched on."
                            }, 
                            "mask": {
                                "type": "integer", 
                                "description": "Value or value set mask."
                            }, 
                            "value": {
                                "type": "integer", 
                                "description": "Value matched on."
                            }, 
                            "buffer_offset": {
                                "type": "integer", 
                                "description": "Offset in the input buffer to load for the next parse cycle."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "List of matches in use."
                }, 
                "state_name": {
                    "type": "string", 
                    "description": "Name of the state in this row."
                }, 
                "extracts": {
                    "items": {
                        "required": [
                            "bit_width", 
                            "extractor_id", 
                            "dest_container"
                        ], 
                        "type": "object", 
                        "properties": {
                            "bit_width": {
                                "type": "integer", 
                                "description": "Size of extractor."
                            }, 
                            "extractor_id": {
                                "type": "integer", 
                                "description": "Which extractor is being used."
                            }, 
                            "constant_value": {
                                "type": "integer", 
                                "description": "Constant to be extracted."
                            }, 
                            "dest_container": {
                                "type": "integer", 
                                "description": "PHV container address."
                            }, 
                            "buffer_offset": {
                                "type": "integer", 
                                "description": "Offset in the input buffer."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "List of extractors in use."
                }, 
                "tcam_row": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3, 
                        4, 
                        5, 
                        6, 
                        7, 
                        8, 
                        9, 
                        10, 
                        11, 
                        12, 
                        13, 
                        14, 
                        15, 
                        16, 
                        17, 
                        18, 
                        19, 
                        20, 
                        21, 
                        22, 
                        23, 
                        24, 
                        25, 
                        26, 
                        27, 
                        28, 
                        29, 
                        30, 
                        31, 
                        32, 
                        33, 
                        34, 
                        35, 
                        36, 
                        37, 
                        38, 
                        39, 
                        40, 
                        41, 
                        42, 
                        43, 
                        44, 
                        45, 
                        46, 
                        47, 
                        48, 
                        49, 
                        50, 
                        51, 
                        52, 
                        53, 
                        54, 
                        55, 
                        56, 
                        57, 
                        58, 
                        59, 
                        60, 
                        61, 
                        62, 
                        63, 
                        64, 
                        65, 
                        66, 
                        67, 
                        68, 
                        69, 
                        70, 
                        71, 
                        72, 
                        73, 
                        74, 
                        75, 
                        76, 
                        77, 
                        78, 
                        79, 
                        80, 
                        81, 
                        82, 
                        83, 
                        84, 
                        85, 
                        86, 
                        87, 
                        88, 
                        89, 
                        90, 
                        91, 
                        92, 
                        93, 
                        94, 
                        95, 
                        96, 
                        97, 
                        98, 
                        99, 
                        100, 
                        101, 
                        102, 
                        103, 
                        104, 
                        105, 
                        106, 
                        107, 
                        108, 
                        109, 
                        110, 
                        111, 
                        112, 
                        113, 
                        114, 
                        115, 
                        116, 
                        117, 
                        118, 
                        119, 
                        120, 
                        121, 
                        122, 
                        123, 
                        124, 
                        125, 
                        126, 
                        127, 
                        128, 
                        129, 
                        130, 
                        131, 
                        132, 
                        133, 
                        134, 
                        135, 
                        136, 
                        137, 
                        138, 
                        139, 
                        140, 
                        141, 
                        142, 
                        143, 
                        144, 
                        145, 
                        146, 
                        147, 
                        148, 
                        149, 
                        150, 
                        151, 
                        152, 
                        153, 
                        154, 
                        155, 
                        156, 
                        157, 
                        158, 
                        159, 
                        160, 
                        161, 
                        162, 
                        163, 
                        164, 
                        165, 
                        166, 
                        167, 
                        168, 
                        169, 
                        170, 
                        171, 
                        172, 
                        173, 
                        174, 
                        175, 
                        176, 
                        177, 
                        178, 
                        179, 
                        180, 
                        181, 
                        182, 
                        183, 
                        184, 
                        185, 
                        186, 
                        187, 
                        188, 
                        189, 
                        190, 
                        191, 
                        192, 
                        193, 
                        194, 
                        195, 
                        196, 
                        197, 
                        198, 
                        199, 
                        200, 
                        201, 
                        202, 
                        203, 
                        204, 
                        205, 
                        206, 
                        207, 
                        208, 
                        209, 
                        210, 
                        211, 
                        212, 
                        213, 
                        214, 
                        215, 
                        216, 
                        217, 
                        218, 
                        219, 
                        220, 
                        221, 
                        222, 
                        223, 
                        224, 
                        225, 
                        226, 
                        227, 
                        228, 
                        229, 
                        230, 
                        231, 
                        232, 
                        233, 
                        234, 
                        235, 
                        236, 
                        237, 
                        238, 
                        239, 
                        240, 
                        241, 
                        242, 
                        243, 
                        244, 
                        245, 
                        246, 
                        247, 
                        248, 
                        249, 
                        250, 
                        251, 
                        252, 
                        253, 
                        254, 
                        255
                    ], 
                    "type": "integer", 
                    "description": "Parser TCAM row."
                }, 
                "shifts": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3, 
                        4, 
                        5, 
                        6, 
                        7, 
                        8, 
                        9, 
                        10, 
                        11, 
                        12, 
                        13, 
                        14, 
                        15, 
                        16, 
                        17, 
                        18, 
                        19, 
                        20, 
                        21, 
                        22, 
                        23, 
                        24, 
                        25, 
                        26, 
                        27, 
                        28, 
                        29, 
                        30, 
                        31, 
                        32
                    ], 
                    "type": "integer", 
                    "description": "Number of bytes shifted in the buffer."
                }, 
                "next_state_id": {
                    "type": "integer", 
                    "description": "The id of the next state following a transition."
                }, 
                "state_id": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3, 
                        4, 
                        5, 
                        6, 
                        7, 
                        8, 
                        9, 
                        10, 
                        11, 
                        12, 
                        13, 
                        14, 
                        15, 
                        16, 
                        17, 
                        18, 
                        19, 
                        20, 
                        21, 
                        22, 
                        23, 
                        24, 
                        25, 
                        26, 
                        27, 
                        28, 
                        29, 
                        30, 
                        31, 
                        32, 
                        33, 
                        34, 
                        35, 
                        36, 
                        37, 
                        38, 
                        39, 
                        40, 
                        41, 
                        42, 
                        43, 
                        44, 
                        45, 
                        46, 
                        47, 
                        48, 
                        49, 
                        50, 
                        51, 
                        52, 
                        53, 
                        54, 
                        55, 
                        56, 
                        57, 
                        58, 
                        59, 
                        60, 
                        61, 
                        62, 
                        63, 
                        64, 
                        65, 
                        66, 
                        67, 
                        68, 
                        69, 
                        70, 
                        71, 
                        72, 
                        73, 
                        74, 
                        75, 
                        76, 
                        77, 
                        78, 
                        79, 
                        80, 
                        81, 
                        82, 
                        83, 
                        84, 
                        85, 
                        86, 
                        87, 
                        88, 
                        89, 
                        90, 
                        91, 
                        92, 
                        93, 
                        94, 
                        95, 
                        96, 
                        97, 
                        98, 
                        99, 
                        100, 
                        101, 
                        102, 
                        103, 
                        104, 
                        105, 
                        106, 
                        107, 
                        108, 
                        109, 
                        110, 
                        111, 
                        112, 
                        113, 
                        114, 
                        115, 
                        116, 
                        117, 
                        118, 
                        119, 
                        120, 
                        121, 
                        122, 
                        123, 
                        124, 
                        125, 
                        126, 
                        127, 
                        128, 
                        129, 
                        130, 
                        131, 
                        132, 
                        133, 
                        134, 
                        135, 
                        136, 
                        137, 
                        138, 
                        139, 
                        140, 
                        141, 
                        142, 
                        143, 
                        144, 
                        145, 
                        146, 
                        147, 
                        148, 
                        149, 
                        150, 
                        151, 
                        152, 
                        153, 
                        154, 
                        155, 
                        156, 
                        157, 
                        158, 
                        159, 
                        160, 
                        161, 
                        162, 
                        163, 
                        164, 
                        165, 
                        166, 
                        167, 
                        168, 
                        169, 
                        170, 
                        171, 
                        172, 
                        173, 
                        174, 
                        175, 
                        176, 
                        177, 
                        178, 
                        179, 
                        180, 
                        181, 
                        182, 
                        183, 
                        184, 
                        185, 
                        186, 
                        187, 
                        188, 
                        189, 
                        190, 
                        191, 
                        192, 
                        193, 
                        194, 
                        195, 
                        196, 
                        197, 
                        198, 
                        199, 
                        200, 
                        201, 
                        202, 
                        203, 
                        204, 
                        205, 
                        206, 
                        207, 
                        208, 
                        209, 
                        210, 
                        211, 
                        212, 
                        213, 
                        214, 
                        215, 
                        216, 
                        217, 
                        218, 
                        219, 
                        220, 
                        221, 
                        222, 
                        223, 
                        224, 
                        225, 
                        226, 
                        227, 
                        228, 
                        229, 
                        230, 
                        231, 
                        232, 
                        233, 
                        234, 
                        235, 
                        236, 
                        237, 
                        238, 
                        239, 
                        240, 
                        241, 
                        242, 
                        243, 
                        244, 
                        245, 
                        246, 
                        247, 
                        248, 
                        249, 
                        250, 
                        251, 
                        252, 
                        253, 
                        254, 
                        255
                    ], 
                    "type": "integer", 
                    "description": "Unique state identifier."
                }, 
                "has_counter": {
                    "type": "boolean", 
                    "description": "True if the state uses a counter."
                }
            }
        }, 
        "VliwUsage": {
            "additionalProperties": false, 
            "required": [
                "instruction_number", 
                "color_usages"
            ], 
            "type": "object", 
            "properties": {
                "color_usages": {
                    "items": {
                        "$ref": "#/definitions/VliwColorUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of color/gress pairs for this VLIW instruction."
                }, 
                "instruction_number": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3, 
                        4, 
                        5, 
                        6, 
                        7, 
                        8, 
                        9, 
                        10, 
                        11, 
                        12, 
                        13, 
                        14, 
                        15, 
                        16, 
                        17, 
                        18, 
                        19, 
                        20, 
                        21, 
                        22, 
                        23, 
                        24, 
                        25, 
                        26, 
                        27, 
                        28, 
                        29, 
                        30, 
                        31
                    ], 
                    "type": "integer", 
                    "description": "VLIW instruction number."
                }
            }
        }, 
        "TernMatchStageTable": {
            "additionalProperties": false, 
            "required": [
                "stage_table_type", 
                "stage_number", 
                "logical_table_id", 
                "size", 
                "memory_resource_allocation", 
                "default_next_table", 
                "result_physical_buses", 
                "has_attached_gateway"
            ], 
            "type": "object", 
            "properties": {
                "default_next_table": {
                    "oneOf": [
                        {
                            "type": "integer"
                        }, 
                        {
                            "type": "null"
                        }
                    ], 
                    "description": "Full address of the default next table, if any."
                }, 
                "has_attached_gateway": {
                    "type": "boolean", 
                    "description": "A Boolean indicating if this stage table has an attached gateway."
                }, 
                "memory_resource_allocation": {
                    "oneOf": [
                        {
                            "type": "null"
                        }, 
                        {
                            "$ref": "#/definitions/MemoryResourceAllocation"
                        }
                    ], 
                    "description": "Representation of the Memory resource allocation for this stage table."
                }, 
                "pack_format": {
                    "items": {
                        "required": [
                            "memory_word_width", 
                            "table_word_width", 
                            "entries", 
                            "entries_per_table_word", 
                            "number_memory_units_per_table_word"
                        ], 
                        "type": "object", 
                        "description": "Structure containing information about how the memory for this stage table is layed out.", 
                        "properties": {
                            "memory_word_width": {
                                "type": "integer", 
                                "description": "Bit width of a single physical memory word."
                            }, 
                            "table_word_width": {
                                "type": "integer", 
                                "description": "Bit width of the table's word."
                            }, 
                            "number_memory_units_per_table_word": {
                                "type": "integer", 
                                "description": "Number of units combined together to form a single table word. Notice that for table words that occupy multiple memory units, the most significant bits of the table word are found in the lowest indexed memory unit."
                            }, 
                            "entries_per_table_word": {
                                "type": "integer", 
                                "description": "Number of entries that are packed into a given table word."
                            }, 
                            "entries": {
                                "items": {
                                    "additionalProperties": false, 
                                    "required": [
                                        "entry_number", 
                                        "fields"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "entry_number": {
                                            "type": "integer", 
                                            "description": "Entry number uniquely identifying this entry."
                                        }, 
                                        "fields": {
                                            "items": {
                                                "required": [
                                                    "start_bit", 
                                                    "field_width", 
                                                    "lsb_mem_word_idx", 
                                                    "source", 
                                                    "msb_mem_word_idx", 
                                                    "lsb_mem_word_offset", 
                                                    "field_name"
                                                ], 
                                                "type": "object", 
                                                "description": "Description of a field in a ternary stage table.", 
                                                "properties": {
                                                    "start_bit": {
                                                        "type": "integer", 
                                                        "description": "A field could be split in multiple slices. Corresponds to the offset, from the least significant bit, where this slice starts."
                                                    }, 
                                                    "field_width": {
                                                        "type": "integer", 
                                                        "description": "Width of this field, in bits."
                                                    }, 
                                                    "lsb_mem_word_idx": {
                                                        "type": "integer", 
                                                        "description": "Index of the wide word containing the least significant bit of this field."
                                                    }, 
                                                    "source": {
                                                        "enum": [
                                                            "version", 
                                                            "zero", 
                                                            "parity", 
                                                            "payload", 
                                                            "range", 
                                                            "spec"
                                                        ], 
                                                        "type": "string", 
                                                        "description": "Type of source that originated this entry."
                                                    }, 
                                                    "range": {
                                                        "required": [
                                                            "type", 
                                                            "is_duplicate"
                                                        ], 
                                                        "type": "object", 
                                                        "description": "Range field information. This value is optional, and will only appear if the field uses ranges.", 
                                                        "properties": {
                                                            "type": {
                                                                "enum": [
                                                                    2, 
                                                                    4
                                                                ], 
                                                                "type": "integer", 
                                                                "description": "Range match type, indicating 2-bit DirtCAM or 4-bit DirtCAM."
                                                            }, 
                                                            "is_duplicate": {
                                                                "type": "boolean", 
                                                                "description": "Whether this range field is a duplicate generated by the compiler or not."
                                                            }
                                                        }
                                                    }, 
                                                    "msb_mem_word_idx": {
                                                        "type": "integer", 
                                                        "description": "Index of the wide word containing the most significant bit of this field."
                                                    }, 
                                                    "lsb_mem_word_offset": {
                                                        "type": "integer", 
                                                        "description": "Offset, within a table word, corresponding to the start of this field, starting from the least significant bit."
                                                    }, 
                                                    "field_name": {
                                                        "type": "string", 
                                                        "description": "Name of this field."
                                                    }
                                                }
                                            }, 
                                            "type": "array", 
                                            "description": "List of fields in this table."
                                        }
                                    }
                                }, 
                                "type": "array", 
                                "description": "Entries packed in this stage table's memory."
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "idletime_stage_table": {
                    "$ref": "#/definitions/IdletimeStageTable"
                }, 
                "ternary_indirection_stage_table": {
                    "$ref": "#/definitions/TindStageTable"
                }, 
                "result_physical_buses": {
                    "items": {
                        "type": "integer"
                    }, 
                    "type": "array", 
                    "description": "An array of integers corresponding to the physical bus numbers used by this stage table. This information is required for snapshot."
                }, 
                "logical_table_id": {
                    "type": "integer", 
                    "description": "Unique identifier for this logical table within this stage."
                }, 
                "stage_table_type": {
                    "enum": [
                        "ternary_match"
                    ], 
                    "type": "string", 
                    "description": "Type of match stage table."
                }, 
                "stage_number": {
                    "type": "integer", 
                    "description": "Number identifying the stage containing this stage table."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Number of entries in this stage table."
                }
            }
        }, 
        "StatefulStageTable": {
            "additionalProperties": false, 
            "required": [
                "stage_table_type", 
                "stage_number", 
                "logical_table_id", 
                "size", 
                "memory_resource_allocation", 
                "meter_alu_index"
            ], 
            "type": "object", 
            "properties": {
                "meter_alu_index": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3
                    ], 
                    "type": "integer", 
                    "description": "An integer that indicates the meter ALU used.  0 is on row 1, 1 on row 3, 2 on row 5 and 3 on row 7."
                }, 
                "memory_resource_allocation": {
                    "oneOf": [
                        {
                            "type": "null"
                        }, 
                        {
                            "$ref": "#/definitions/MemoryResourceAllocation"
                        }
                    ], 
                    "description": "Representation of the Memory resource allocation for this stage table."
                }, 
                "pack_format": {
                    "items": {
                        "required": [
                            "memory_word_width", 
                            "table_word_width", 
                            "entries_per_table_word", 
                            "number_memory_units_per_table_word"
                        ], 
                        "type": "object", 
                        "description": "Structure containing information about how the memory for this stage table is layed out.", 
                        "properties": {
                            "memory_word_width": {
                                "type": "integer", 
                                "description": "Bit width of a single physical memory word."
                            }, 
                            "table_word_width": {
                                "type": "integer", 
                                "description": "Bit width of the table's word."
                            }, 
                            "entries_per_table_word": {
                                "type": "integer", 
                                "description": "Number of entries that are packed into a given table word."
                            }, 
                            "number_memory_units_per_table_word": {
                                "type": "integer", 
                                "description": "Number of units combined together to form a single table word. Notice that for table words that occupy multiple memory units, the most significant bits of the table word are found in the lowest indexed memory unit."
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "logical_table_id": {
                    "type": "integer", 
                    "description": "Unique identifier for this logical table within this stage."
                }, 
                "stage_table_type": {
                    "enum": [
                        "stateful"
                    ], 
                    "type": "string", 
                    "description": "Type of stage table."
                }, 
                "stage_number": {
                    "type": "integer", 
                    "description": "Number identifying the stage containing this stage table."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Number of entries in this stage table."
                }
            }
        }, 
        "SelectionTable": {
            "additionalProperties": false, 
            "required": [
                "name", 
                "handle", 
                "size", 
                "direction", 
                "table_type", 
                "selector_name", 
                "selection_type", 
                "selection_key_name", 
                "how_referenced", 
                "stage_tables"
            ], 
            "type": "object", 
            "properties": {
                "direction": {
                    "enum": [
                        "ingress", 
                        "egress"
                    ], 
                    "type": "string", 
                    "description": "Whether this table is used for ingress or egress."
                }, 
                "handle": {
                    "type": "integer", 
                    "description": "Unique identifier for this table."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of this table."
                }, 
                "selection_key_name": {
                    "type": "string", 
                    "description": "The name given to the selector calculation object in P4."
                }, 
                "selection_type": {
                    "enum": [
                        "resilient", 
                        "fair"
                    ], 
                    "type": "string", 
                    "description": "Whether the selection is [resilient] or [fair]."
                }, 
                "table_type": {
                    "enum": [
                        "selection"
                    ], 
                    "type": "string", 
                    "description": "Type of table."
                }, 
                "how_referenced": {
                    "enum": [
                        "direct", 
                        "indirect"
                    ], 
                    "type": "string", 
                    "description": "Whether the table is directly or indirectly referenced."
                }, 
                "bound_to_stateful_table_handle": {
                    "type": "integer", 
                    "description": "An integer indicating the stateful table handle this is bound to, if any.  A selection table is bound to a stateful table in cases where a packet generator packet is used to update the live port members."
                }, 
                "bound_to_action_data_table_handle": {
                    "type": "integer", 
                    "description": "An integer indicating the action data table handle this is bound to, if any. FIXME: Update description."
                }, 
                "selector_name": {
                    "type": "string", 
                    "description": "The name given to the action selector in P4."
                }, 
                "max_port_pool_size": {
                    "type": "integer", 
                    "description": "An integer indicating the maximum number of members available in any selection group."
                }, 
                "dynamic_selection_calculation": {
                    "type": "string", 
                    "description": "If this selector uses dynamic hashing, the name given to the P4 calculation object."
                }, 
                "stage_tables": {
                    "items": {
                        "$ref": "#/definitions/SelectionStageTable"
                    }, 
                    "type": "array", 
                    "description": "An array of stage-specific resource objects for this selection table."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Minimum size of this table, as specified in P4."
                }
            }
        }, 
        "ATCAMMatchStageTable": {
            "additionalProperties": false, 
            "required": [
                "stage_table_type", 
                "stage_number", 
                "logical_table_id", 
                "size", 
                "memory_resource_allocation", 
                "default_next_table", 
                "hash_functions", 
                "result_physical_buses", 
                "has_attached_gateway", 
                "action_format"
            ], 
            "type": "object", 
            "properties": {
                "default_next_table": {
                    "oneOf": [
                        {
                            "type": "integer"
                        }, 
                        {
                            "type": "null"
                        }
                    ], 
                    "description": "Full address of the default next table, if any."
                }, 
                "has_attached_gateway": {
                    "type": "boolean", 
                    "description": "A Boolean indicating if this stage table has an attached gateway."
                }, 
                "action_format": {
                    "items": {
                        "$ref": "#/definitions/ActionHandleFormat"
                    }, 
                    "type": "array", 
                    "description": "List of action handles for this exact match stage table."
                }, 
                "memory_resource_allocation": {
                    "items": {
                        "$ref": "#/definitions/ATCAMMemoryResourceAllocation"
                    }, 
                    "type": "array", 
                    "description": "A representation of the memory resources used by this ATCAM stage table."
                }, 
                "pack_format": {
                    "items": {
                        "required": [
                            "memory_word_width", 
                            "table_word_width", 
                            "entries_per_table_word", 
                            "number_memory_units_per_table_word"
                        ], 
                        "type": "object", 
                        "description": "Structure containing information about how the memory for this stage table is layed out.", 
                        "properties": {
                            "memory_word_width": {
                                "type": "integer", 
                                "description": "Bit width of a single physical memory word."
                            }, 
                            "table_word_width": {
                                "type": "integer", 
                                "description": "Bit width of the table's word."
                            }, 
                            "entries_per_table_word": {
                                "type": "integer", 
                                "description": "Number of entries that are packed into a given table word."
                            }, 
                            "number_memory_units_per_table_word": {
                                "type": "integer", 
                                "description": "Number of units combined together to form a single table word. Notice that for table words that occupy multiple memory units, the most significant bits of the table word are found in the lowest indexed memory unit."
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "idletime_stage_table": {
                    "$ref": "#/definitions/IdletimeStageTable"
                }, 
                "hash_functions": {
                    "items": {
                        "$ref": "#/definitions/HashFunction"
                    }, 
                    "type": "array", 
                    "description": "Array of hash functions for this match table."
                }, 
                "result_physical_buses": {
                    "items": {
                        "type": "integer"
                    }, 
                    "type": "array", 
                    "description": "An array of integers corresponding to the physical bus numbers used by this stage table. This information is required for snapshot."
                }, 
                "logical_table_id": {
                    "type": "integer", 
                    "description": "Unique identifier for this logical table within this stage."
                }, 
                "stage_table_type": {
                    "enum": [
                        "algorithmic_tcam_match"
                    ], 
                    "type": "string", 
                    "description": "Type of exact match stage table."
                }, 
                "stage_number": {
                    "type": "integer", 
                    "description": "Number identifying the stage containing this stage table."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Number of entries in this stage table."
                }
            }
        }, 
        "Phase0ResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "usages"
            ], 
            "type": "object", 
            "properties": {
                "usages": {
                    "items": {
                        "$ref": "#/definitions/ElementUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of Phase 0 is used."
                }
            }
        }, 
        "ActionDataByteUsage": {
            "additionalProperties": false, 
            "required": [
                "byte_number", 
                "usages"
            ], 
            "type": "object", 
            "properties": {
                "byte_number": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3, 
                        4, 
                        5, 
                        6, 
                        7, 
                        8, 
                        9, 
                        10, 
                        11, 
                        12, 
                        13, 
                        14, 
                        15, 
                        16, 
                        17, 
                        18, 
                        19, 
                        20, 
                        21, 
                        22, 
                        23, 
                        24, 
                        25, 
                        26, 
                        27, 
                        28, 
                        29, 
                        30, 
                        31, 
                        32, 
                        33, 
                        34, 
                        35, 
                        36, 
                        37, 
                        38, 
                        39, 
                        40, 
                        41, 
                        42, 
                        43, 
                        44, 
                        45, 
                        46, 
                        47, 
                        48, 
                        49, 
                        50, 
                        51, 
                        52, 
                        53, 
                        54, 
                        55, 
                        56, 
                        57, 
                        58, 
                        59, 
                        60, 
                        61, 
                        62, 
                        63, 
                        64, 
                        65, 
                        66, 
                        67, 
                        68, 
                        69, 
                        70, 
                        71, 
                        72, 
                        73, 
                        74, 
                        75, 
                        76, 
                        77, 
                        78, 
                        79, 
                        80, 
                        81, 
                        82, 
                        83, 
                        84, 
                        85, 
                        86, 
                        87, 
                        88, 
                        89, 
                        90, 
                        91, 
                        92, 
                        93, 
                        94, 
                        95, 
                        96, 
                        97, 
                        98, 
                        99, 
                        100, 
                        101, 
                        102, 
                        103, 
                        104, 
                        105, 
                        106, 
                        107, 
                        108, 
                        109, 
                        110, 
                        111, 
                        112, 
                        113, 
                        114, 
                        115, 
                        116, 
                        117, 
                        118, 
                        119, 
                        120, 
                        121, 
                        122, 
                        123, 
                        124, 
                        125, 
                        126, 
                        127
                    ], 
                    "type": "integer", 
                    "description": "Action data bus byte number."
                }, 
                "usages": {
                    "items": {
                        "$ref": "#/definitions/ElementUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of how this action data bus byte is used."
                }
            }
        }, 
        "PHV": {
            "additionalProperties": false, 
            "required": [
                "phv_number", 
                "container_type", 
                "word_bit_width", 
                "records"
            ], 
            "type": "object", 
            "properties": {
                "phv_number": {
                    "type": "integer", 
                    "description": "Unique address of this PHV container."
                }, 
                "records": {
                    "items": {
                        "required": [
                            "field_width", 
                            "phv_msb", 
                            "field_name", 
                            "is_compiler_generated", 
                            "position_offset", 
                            "phv_lsb", 
                            "is_pov", 
                            "field_msb", 
                            "field_lsb"
                        ], 
                        "type": "object", 
                        "description": "Description of a field occupying this PHV.", 
                        "properties": {
                            "mutually_exclusive_with": {
                                "items": {
                                    "type": "string", 
                                    "description": "Name of a field also found in this container that the field is mutually exclusive with."
                                }, 
                                "type": "array", 
                                "description": "List of field names in this container that this field is mutually exclusive with."
                            }, 
                            "phv_lsb": {
                                "type": "integer", 
                                "description": "Least significant bit of this PHV container that is occupied."
                            }, 
                            "live_end": {
                                "oneOf": [
                                    {
                                        "type": "integer"
                                    }, 
                                    {
                                        "enum": [
                                            "parser", 
                                            "deparser"
                                        ], 
                                        "type": "string"
                                    }
                                ], 
                                "description": "The location this field is last live."
                            }, 
                            "live_start": {
                                "oneOf": [
                                    {
                                        "type": "integer"
                                    }, 
                                    {
                                        "enum": [
                                            "parser", 
                                            "deparser"
                                        ], 
                                        "type": "string"
                                    }
                                ], 
                                "description": "The location this field is first live."
                            }, 
                            "field_width": {
                                "type": "integer", 
                                "description": "Full width of this field in the P4 program. The field may be split among multiple PHVs."
                            }, 
                            "pov_headers": {
                                "items": {
                                    "required": [
                                        "bit_index", 
                                        "position_offset", 
                                        "header_name", 
                                        "hidden"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "bit_index": {
                                            "type": "integer", 
                                            "description": "The index of this POV bit in the PHV record."
                                        }, 
                                        "position_offset": {
                                            "type": "integer", 
                                            "description": "The position offset of this field in what would correspond to the driver's byte array. The driver puts all fields in an ordered fashion from each PHV into a byte array. Fields that are 3 byte long are padded to 4 bytes."
                                        }, 
                                        "header_name": {
                                            "type": "string", 
                                            "description": "Name of the POV header."
                                        }, 
                                        "hidden": {
                                            "type": "boolean", 
                                            "description": "Whether this field is hidden from the driver's byte array."
                                        }
                                    }
                                }, 
                                "type": "array", 
                                "description": "An array of the POV headers in this PHV record."
                            }, 
                            "field_lsb": {
                                "type": "integer", 
                                "description": "Least significant bit of the field in this container."
                            }, 
                            "is_pov": {
                                "type": "boolean", 
                                "description": "A Boolean indicating whether this field is a POV."
                            }, 
                            "field_msb": {
                                "type": "integer", 
                                "description": "Most significant bit of this field in this container.  This container will hold field[msb:lsb]."
                            }, 
                            "phv_msb": {
                                "type": "integer", 
                                "description": "Most significant bit of this PHV container that is occupied.  This allocation is phv[phv_msb:phv_lsb] = field[field_msb:field_lsb]."
                            }, 
                            "format_type": {
                                "type": "string", 
                                "description": "A user-supplied type for this field, which can be used for string formatting during display."
                            }, 
                            "field_name": {
                                "type": "string", 
                                "description": "Name of the field."
                            }, 
                            "position_offset": {
                                "type": "integer", 
                                "description": "The position offset of this field in what would correspond to the driver's byte array. The driver puts all fields in an ordered fashion from each PHV into a byte array. Fields that are 3 byte long are padded to 4 bytes."
                            }, 
                            "is_compiler_generated": {
                                "type": "boolean", 
                                "description": "Indicates whether this field was generated by the compiler."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "List of fields occupying this PHV container."
                }, 
                "word_bit_width": {
                    "enum": [
                        8, 
                        16, 
                        32
                    ], 
                    "type": "integer", 
                    "description": "The PHV container bit width."
                }, 
                "container_type": {
                    "enum": [
                        "normal", 
                        "tagalong", 
                        "mocha", 
                        "dark"
                    ], 
                    "type": "string", 
                    "description": "A string describing the type of this PHV container."
                }
            }
        }, 
        "Phase0MatchTableAttr": {
            "additionalProperties": false, 
            "required": [
                "match_type", 
                "stage_tables"
            ], 
            "type": "object", 
            "properties": {
                "stage_tables": {
                    "items": {
                        "$ref": "#/definitions/Phase0MatchStageTable"
                    }, 
                    "type": "array", 
                    "description": "An array of stage-specific resource objects for this match table. Phase 0 match tables should have only one of these."
                }, 
                "match_type": {
                    "enum": [
                        "phase_0_match"
                    ], 
                    "type": "string", 
                    "description": "Type of match table."
                }
            }
        }, 
        "StatisticAluResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "nAlus", 
                "stats"
            ], 
            "type": "object", 
            "properties": {
                "nAlus": {
                    "type": "integer", 
                    "description": "Total number of ALUs."
                }, 
                "stats": {
                    "items": {
                        "$ref": "#/definitions/StatisticAluUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of used Statistic ALUs."
                }
            }
        }, 
        "MatchTable": {
            "additionalProperties": false, 
            "required": [
                "name", 
                "handle", 
                "size", 
                "direction", 
                "table_type", 
                "uses_range", 
                "action_data_table_refs", 
                "selection_table_refs", 
                "statistics_table_refs", 
                "meter_table_refs", 
                "stateful_table_refs", 
                "default_next_table_mask", 
                "match_key_fields", 
                "actions", 
                "match_attributes"
            ], 
            "type": "object", 
            "properties": {
                "default_next_table_mask": {
                    "type": "integer", 
                    "description": "Mask used to not overwrite the next_table field in the match spec. FIXME"
                }, 
                "actions": {
                    "items": {
                        "required": [
                            "override_meter_addr", 
                            "handle", 
                            "name", 
                            "indirect_resources", 
                            "override_stat_full_addr", 
                            "override_meter_addr_pfe", 
                            "allowed_as_default_action", 
                            "p4_parameters", 
                            "override_stat_addr_pfe", 
                            "override_meter_full_addr", 
                            "primitives", 
                            "override_stat_addr", 
                            "override_stateful_addr", 
                            "override_stateful_full_addr", 
                            "constant_default_action", 
                            "override_stateful_addr_pfe", 
                            "is_action_meter_color_aware"
                        ], 
                        "type": "object", 
                        "properties": {
                            "disallowed_as_default_action_reason": {
                                "type": "string", 
                                "description": "If this action cannot be used as a default action, a short description indicating the reason it cannot."
                            }, 
                            "is_action_meter_color_aware": {
                                "type": "boolean", 
                                "description": "A Boolean indicating if this action performs a metering operation that is color aware."
                            }, 
                            "handle": {
                                "type": "integer", 
                                "description": "A unique identifier for this action."
                            }, 
                            "name": {
                                "type": "string", 
                                "description": "The P4 name of the action."
                            }, 
                            "indirect_resources": {
                                "items": {
                                    "anyOf": [
                                        {
                                            "required": [
                                                "access_mode", 
                                                "resource_name"
                                            ], 
                                            "type": "object", 
                                            "properties": {
                                                "access_mode": {
                                                    "enum": [
                                                        "index"
                                                    ], 
                                                    "type": "string", 
                                                    "description": "The mode used to access the indirect resource. If this value is 'constant', then the indirect resource is accessed through a constant index that cannot be changed at runtime. If it is 'index', the index comes from action data."
                                                }, 
                                                "parameter_index": {
                                                    "type": "integer", 
                                                    "description": "The index of the parameter in the action parameter list."
                                                }, 
                                                "resource_name": {
                                                    "type": "string", 
                                                    "description": "The name of the indirect resource consumed."
                                                }, 
                                                "parameter_name": {
                                                    "type": "string", 
                                                    "description": "The action parameter name corresponding to how the resource is accessed. Only applicable if the access mode is 'index'."
                                                }
                                            }
                                        }, 
                                        {
                                            "required": [
                                                "access_mode", 
                                                "value", 
                                                "resource_name"
                                            ], 
                                            "type": "object", 
                                            "properties": {
                                                "access_mode": {
                                                    "enum": [
                                                        "constant"
                                                    ], 
                                                    "type": "string", 
                                                    "description": "The mode used to access the indirect resource. If this value is 'constant', then the indirect resource is accessed through a constant index that cannot be changed at runtime. If it is 'index', the index comes from action data."
                                                }, 
                                                "value": {
                                                    "type": "integer", 
                                                    "description": "The constant value. Only applicable if the access mode is 'constant'."
                                                }, 
                                                "resource_name": {
                                                    "type": "string", 
                                                    "description": "The name of the indirect resource consumed."
                                                }
                                            }
                                        }
                                    ]
                                }, 
                                "type": "array", 
                                "description": "A list of the indirect resources consumed by this action."
                            }, 
                            "override_stat_full_addr": {
                                "type": "integer", 
                                "description": "The full hardware address of the statistics address to encode in the match overhead.  This is a 20-bit value."
                            }, 
                            "override_meter_addr_pfe": {
                                "type": "boolean", 
                                "description": "A Boolean indicating the driver should always write a 1 to the PFE bit in the meter address in match overhead."
                            }, 
                            "allowed_as_default_action": {
                                "type": "boolean", 
                                "description": "A Boolean indicating if this action can be used as a table default action (the table miss action)."
                            }, 
                            "p4_parameters": {
                                "items": {
                                    "required": [
                                        "bit_width", 
                                        "name", 
                                        "start_bit"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "default_value": {
                                            "type": "integer", 
                                            "description": "Default value of this parameter, in case this table is the default one."
                                        }, 
                                        "bit_width": {
                                            "type": "integer", 
                                            "description": "The bit width of the parameter."
                                        }, 
                                        "name": {
                                            "type": "string", 
                                            "description": "The name of the parameter from P4."
                                        }, 
                                        "start_bit": {
                                            "type": "integer", 
                                            "description": "The bit offset of this parameter in the action parameter list. This value refers to the most significant bit."
                                        }, 
                                        "format_type": {
                                            "type": "string", 
                                            "description": "A user-supplied type for this field, which can be used for string formatting during display."
                                        }
                                    }
                                }, 
                                "type": "array", 
                                "description": "An array of P4 parameter properties used by this action."
                            }, 
                            "override_stat_addr_pfe": {
                                "type": "boolean", 
                                "description": "A Boolean indicating the driver should always write a 1 to the PFE bit in the statistics address in match overhead."
                            }, 
                            "override_meter_full_addr": {
                                "type": "integer", 
                                "description": "The full hardware address of the meter address to encode in the match overhead.  This is a 27-bit value."
                            }, 
                            "constant_default_action": {
                                "type": "boolean", 
                                "description": "A Boolean indicating if this action is a constant default action.  If true, the action cannot be changed by the the control plane.  The action parameters, if any, can be changed in any scenario."
                            }, 
                            "override_stat_addr": {
                                "type": "boolean", 
                                "description": "A Boolean indicating the driver should always write the value indicated in override_stat_full_addr to the statistics address in match overhead."
                            }, 
                            "override_stateful_addr": {
                                "type": "boolean", 
                                "description": "A Boolean indicating the driver should always write the value indicated in override_stateful_full_addr to the stateful address in match overhead."
                            }, 
                            "override_stateful_full_addr": {
                                "type": "integer", 
                                "description": "The full hardware address of the stateful address to encode in the match overhead.  This is a 27-bit value."
                            }, 
                            "primitives": {
                                "items": {
                                    "$ref": "#/definitions/P4Primitive"
                                }, 
                                "type": "array", 
                                "description": "An list of the primitives called from this action."
                            }, 
                            "override_meter_addr": {
                                "type": "boolean", 
                                "description": "A Boolean indicating the driver should always write the value indicated in override_meter_full_addr to the meter address in match overhead."
                            }, 
                            "override_stateful_addr_pfe": {
                                "type": "boolean", 
                                "description": "A Boolean indicating the driver should always write a 1 to the PFE bit in the stateful address in match overhead."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "An array of action properties that are available for this match table."
                }, 
                "disable_atomic_modify": {
                    "type": "boolean", 
                    "description": "Boolean indicating whether atomic table modifications should be disabled."
                }, 
                "default_action_handle": {
                    "type": "integer", 
                    "description": "The handle to the P4-specified default action for a table.  This is the action run when the match table misses.  If no default action is specified, no action is taken."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Minimum size of this table, as specified in P4."
                }, 
                "statistics_table_refs": {
                    "items": {
                        "$ref": "#/definitions/ReferencedTable"
                    }, 
                    "type": "array", 
                    "description": "Statistics Tables referenced from this table."
                }, 
                "meter_table_refs": {
                    "items": {
                        "$ref": "#/definitions/ReferencedTable"
                    }, 
                    "type": "array", 
                    "description": "Meter Tables referenced from this table."
                }, 
                "match_attributes": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/ExactMatchTableAttr"
                        }, 
                        {
                            "$ref": "#/definitions/TernMatchTableAttr"
                        }, 
                        {
                            "$ref": "#/definitions/ATCAMMatchTableAttr"
                        }, 
                        {
                            "$ref": "#/definitions/ATCAMMatchUnitAttr"
                        }, 
                        {
                            "$ref": "#/definitions/ALPMMatchTableAttr"
                        }, 
                        {
                            "$ref": "#/definitions/CLPMMatchTableAttr"
                        }, 
                        {
                            "$ref": "#/definitions/MatchWithNoKeyTableAttr"
                        }, 
                        {
                            "$ref": "#/definitions/HashActionTableAttr"
                        }, 
                        {
                            "$ref": "#/definitions/Phase0MatchTableAttr"
                        }
                    ], 
                    "description": "The implementation type for this match table."
                }, 
                "match_key_fields": {
                    "items": {
                        "required": [
                            "bit_width", 
                            "match_type", 
                            "name", 
                            "instance_name", 
                            "is_valid", 
                            "bit_width_full", 
                            "field_name", 
                            "start_bit"
                        ], 
                        "type": "object", 
                        "properties": {
                            "bit_width": {
                                "type": "integer", 
                                "description": "The number of bits of the field involved in match.  If this is not the entire field, the field slice can be represented as field[start_bit + bit_width - 1 : start_bit]."
                            }, 
                            "match_type": {
                                "enum": [
                                    "exact", 
                                    "lpm", 
                                    "range", 
                                    "ternary", 
                                    "valid"
                                ], 
                                "type": "string", 
                                "description": "An indication of the match type for this field."
                            }, 
                            "name": {
                                "type": "string", 
                                "description": "The fully qualified name of the field."
                            }, 
                            "instance_name": {
                                "type": "string", 
                                "description": "The header or metadata instance name for the field."
                            }, 
                            "is_valid": {
                                "type": "boolean", 
                                "description": "Whether this match key field is on the valid bit of the specified field."
                            }, 
                            "bit_width_full": {
                                "type": "integer", 
                                "description": "The bit width of the field in its entirety.  This will match the bit_width attribute except when it is a field slice."
                            }, 
                            "field_name": {
                                "type": "string", 
                                "description": "The name of the field."
                            }, 
                            "start_bit": {
                                "type": "integer", 
                                "description": "An integer indicating the start bit, from the least significant bit, to use for the field."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "An array of match key field properties."
                }, 
                "direction": {
                    "enum": [
                        "ingress", 
                        "egress"
                    ], 
                    "type": "string", 
                    "description": "Whether this table is used for ingress or egress."
                }, 
                "handle": {
                    "type": "integer", 
                    "description": "Unique identifier for this table."
                }, 
                "is_resource_controllable": {
                    "type": "boolean", 
                    "description": "A Boolean specifying whether this table is controllable by the driver. This information is used by the PD generation tool."
                }, 
                "table_type": {
                    "enum": [
                        "match"
                    ], 
                    "type": "string", 
                    "description": "Type of table."
                }, 
                "range_entries": {
                    "type": "integer", 
                    "description": "The number of P4-level range entries available."
                }, 
                "selection_table_refs": {
                    "items": {
                        "$ref": "#/definitions/ReferencedTable"
                    }, 
                    "type": "array", 
                    "description": "Selection Tables referenced from this table."
                }, 
                "default_selector_value": {
                    "type": "integer", 
                    "description": "FIXME. Only applicable if this match table uses a selector."
                }, 
                "stateful_table_refs": {
                    "items": {
                        "$ref": "#/definitions/ReferencedTable"
                    }, 
                    "type": "array", 
                    "description": "Stateful Tables referenced from this table."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of this table."
                }, 
                "default_selector_mask": {
                    "type": "integer", 
                    "description": "FIXME. Only applicable if this match table uses a selector."
                }, 
                "ap_bind_indirect_res_to_match": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "This value is deduced from the bind_indirect_res_to_match pragma. It is used by PD to indicate that an indirect resource is attached to the match table, and not to the action data as it usually is."
                }, 
                "action_profile": {
                    "type": "string", 
                    "description": "Name of the action profile currently in use. This information is used for PD generation."
                }, 
                "uses_range": {
                    "type": "boolean", 
                    "description": "Whether this table uses range fields or not."
                }, 
                "action_data_table_refs": {
                    "items": {
                        "$ref": "#/definitions/ReferencedTable"
                    }, 
                    "type": "array", 
                    "description": "Action Data Tables referenced from this table."
                }, 
                "static_entries": {
                    "items": {
                        "required": [
                            "action_parameters_values", 
                            "match_key_fields_values", 
                            "action_handle", 
                            "is_default_entry"
                        ], 
                        "type": "object", 
                        "description": "An array of the static entries to be programmed by the driver.", 
                        "properties": {
                            "priority": {
                                "type": "integer", 
                                "description": "An integer indicating the entry priority.  Not currently used."
                            }, 
                            "action_parameters_values": {
                                "items": {
                                    "required": [
                                        "value", 
                                        "parameter_name"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "value": {
                                            "type": "integer", 
                                            "description": "An integer indicating the value to program for this parameter."
                                        }, 
                                        "parameter_name": {
                                            "type": "string", 
                                            "description": "The name of the action parameter."
                                        }
                                    }
                                }, 
                                "type": "array", 
                                "description": "An array of the action data parameter properties."
                            }, 
                            "match_key_fields_values": {
                                "items": {
                                    "required": [
                                        "field_name", 
                                        "value"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "field_name": {
                                            "type": "string", 
                                            "description": "The name of the field."
                                        }, 
                                        "value": {
                                            "type": "integer", 
                                            "description": "An integer indicating the value to program for this field."
                                        }
                                    }
                                }, 
                                "type": "array", 
                                "description": "An array of match key field properties for this entry."
                            }, 
                            "action_handle": {
                                "type": "integer", 
                                "description": "The unique handle for the action to run."
                            }, 
                            "is_default_entry": {
                                "type": "boolean", 
                                "description": "A Boolean indicating if this is the default table entry."
                            }
                        }
                    }, 
                    "type": "array"
                }
            }
        }, 
        "HashDistributionResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "nHashIds", 
                "nUnitIds", 
                "units"
            ], 
            "type": "object", 
            "properties": {
                "nHashIds": {
                    "type": "integer", 
                    "description": "Total number of hash ids in a hash distribution unit."
                }, 
                "units": {
                    "items": {
                        "$ref": "#/definitions/HashDistributionUnitUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of used hash distribution units."
                }, 
                "nUnitIds": {
                    "type": "integer", 
                    "description": "Number of hash groups in a hash distribution unit."
                }
            }
        }, 
        "HashFunction": {
            "additionalProperties": false, 
            "required": [
                "hash_function_number", 
                "hash_bits"
            ], 
            "type": "object", 
            "properties": {
                "hash_function_number": {
                    "type": "integer", 
                    "description": "The number identifying this hash function in this stage table. This number can currently only be 0 or 1, and it corresponds to the hash functions used by different way groups. The lower ways will use hash function 0, and the higher ways will use hash function 1."
                }, 
                "hash_bits": {
                    "items": {
                        "required": [
                            "hash_bit", 
                            "seed"
                        ], 
                        "type": "object", 
                        "properties": {
                            "hash_bit": {
                                "type": "integer", 
                                "description": "Identifier for this particular hash bit."
                            }, 
                            "seed": {
                                "enum": [
                                    0, 
                                    1
                                ], 
                                "type": "integer", 
                                "description": "Seed value for this particular hash bit."
                            }, 
                            "bits_to_xor": {
                                "items": {
                                    "required": [
                                        "hash_match_group_bit", 
                                        "field_name", 
                                        "field_bit", 
                                        "hash_match_group"
                                    ], 
                                    "type": "object", 
                                    "description": "Description of bit from the match spec to include in the hash computation for a particular hash output bit.", 
                                    "properties": {
                                        "hash_match_group_bit": {
                                            "type": "integer", 
                                            "description": "Bit within the hash match group corresponding to this bit."
                                        }, 
                                        "field_name": {
                                            "type": "string", 
                                            "description": "Identifier for this particular hash bit."
                                        }, 
                                        "field_bit": {
                                            "type": "integer", 
                                            "description": "Bit within the byte of the field corresponding to this hash."
                                        }, 
                                        "hash_match_group": {
                                            "type": "integer", 
                                            "description": "Number identifying the hash match group in which this bit resides."
                                        }
                                    }
                                }, 
                                "type": "array"
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "Array of match spec bit properties to include in the calculation for each particular hash result output bit."
                }, 
                "ghost_bit_to_hash_bit": {
                    "items": {
                        "items": {
                            "type": "integer", 
                            "description": "Hash bit within this hash function for which this ghost bit participates"
                        }, 
                        "type": "array", 
                        "description": "ghost bits to hash bits"
                    }, 
                    "type": "array", 
                    "description": "Array of ghost bits to hash bits, one per ghost bit"
                }, 
                "ghost_bit_info": {
                    "items": {
                        "type": "object", 
                        "description": "Information on ghost bits for this stage.", 
                        "properties": {
                            "bit_in_match_spec": {
                                "type": "integer", 
                                "description": "Bit within the field where this ghost bit lives."
                            }, 
                            "field_name": {
                                "type": "string", 
                                "description": "Name of the field."
                            }
                        }
                    }, 
                    "type": "array"
                }
            }
        }, 
        "HashMatchStageTable": {
            "additionalProperties": false, 
            "required": [
                "stage_table_type", 
                "stage_number", 
                "logical_table_id", 
                "size", 
                "memory_resource_allocation", 
                "hash_functions", 
                "result_physical_buses", 
                "has_attached_gateway", 
                "ways", 
                "action_format", 
                "stash_allocation", 
                "default_next_table"
            ], 
            "type": "object", 
            "properties": {
                "stash_allocation": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/StashAllocation"
                        }, 
                        {
                            "type": "null"
                        }
                    ]
                }, 
                "default_next_table": {
                    "oneOf": [
                        {
                            "type": "integer"
                        }, 
                        {
                            "type": "null"
                        }
                    ], 
                    "description": "Full address of the default next table, if any."
                }, 
                "has_attached_gateway": {
                    "type": "boolean", 
                    "description": "A Boolean indicating if this stage table has an attached gateway."
                }, 
                "action_format": {
                    "items": {
                        "$ref": "#/definitions/ActionHandleFormat"
                    }, 
                    "type": "array", 
                    "description": "List of action handles for this exact match stage table."
                }, 
                "memory_resource_allocation": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/HashMatchMemoryResourceAllocation"
                        }, 
                        {
                            "type": "null"
                        }
                    ]
                }, 
                "pack_format": {
                    "items": {
                        "required": [
                            "memory_word_width", 
                            "table_word_width", 
                            "entries_per_table_word", 
                            "number_memory_units_per_table_word"
                        ], 
                        "type": "object", 
                        "description": "Structure containing information about how the memory for this stage table is layed out.", 
                        "properties": {
                            "memory_word_width": {
                                "type": "integer", 
                                "description": "Bit width of a single physical memory word."
                            }, 
                            "table_word_width": {
                                "type": "integer", 
                                "description": "Bit width of the table's word."
                            }, 
                            "entries_per_table_word": {
                                "type": "integer", 
                                "description": "Number of entries that are packed into a given table word."
                            }, 
                            "number_memory_units_per_table_word": {
                                "type": "integer", 
                                "description": "Number of units combined together to form a single table word. Notice that for table words that occupy multiple memory units, the most significant bits of the table word are found in the lowest indexed memory unit."
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "idletime_stage_table": {
                    "$ref": "#/definitions/IdletimeStageTable"
                }, 
                "hash_functions": {
                    "items": {
                        "$ref": "#/definitions/HashFunction"
                    }, 
                    "type": "array", 
                    "description": "Array of hash functions for this match table."
                }, 
                "ways": {
                    "items": {
                        "$ref": "#/definitions/HashWayStageTable"
                    }, 
                    "type": "array", 
                    "description": "Context information for each particular way in this exact match stage table."
                }, 
                "result_physical_buses": {
                    "items": {
                        "type": "integer"
                    }, 
                    "type": "array", 
                    "description": "An array of integers corresponding to the physical bus numbers used by this stage table. This information is required for snapshot."
                }, 
                "logical_table_id": {
                    "type": "integer", 
                    "description": "Unique identifier for this logical table within this stage."
                }, 
                "stage_table_type": {
                    "enum": [
                        "hash_match"
                    ], 
                    "type": "string", 
                    "description": "Type of exact match stage table."
                }, 
                "stage_number": {
                    "type": "integer", 
                    "description": "Number identifying the stage containing this stage table."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Number of entries in this stage table."
                }
            }
        }, 
        "MeterStageTable": {
            "additionalProperties": false, 
            "required": [
                "stage_table_type", 
                "stage_number", 
                "logical_table_id", 
                "size", 
                "memory_resource_allocation", 
                "default_lower_huffman_bits_included", 
                "meter_alu_index", 
                "color_memory_resource_allocation"
            ], 
            "type": "object", 
            "properties": {
                "meter_alu_index": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3
                    ], 
                    "type": "integer", 
                    "description": "An integer that indicates the meter ALU used.  0 is on row 1, 1 on row 3, 2 on row 5 and 3 on row 7."
                }, 
                "color_memory_resource_allocation": {
                    "oneOf": [
                        {
                            "type": "null"
                        }, 
                        {
                            "$ref": "#/definitions/MemoryResourceAllocation"
                        }
                    ], 
                    "description": "Representation of the color memory resource allocation for this meter."
                }, 
                "memory_resource_allocation": {
                    "oneOf": [
                        {
                            "type": "null"
                        }, 
                        {
                            "$ref": "#/definitions/MemoryResourceAllocation"
                        }
                    ], 
                    "description": "Representation of the Memory resource allocation for this stage table."
                }, 
                "pack_format": {
                    "items": {
                        "required": [
                            "memory_word_width", 
                            "table_word_width", 
                            "entries_per_table_word", 
                            "number_memory_units_per_table_word"
                        ], 
                        "type": "object", 
                        "description": "Structure containing information about how the memory for this stage table is layed out.", 
                        "properties": {
                            "memory_word_width": {
                                "type": "integer", 
                                "description": "Bit width of a single physical memory word."
                            }, 
                            "table_word_width": {
                                "type": "integer", 
                                "description": "Bit width of the table's word."
                            }, 
                            "entries_per_table_word": {
                                "type": "integer", 
                                "description": "Number of entries that are packed into a given table word."
                            }, 
                            "number_memory_units_per_table_word": {
                                "type": "integer", 
                                "description": "Number of units combined together to form a single table word. Notice that for table words that occupy multiple memory units, the most significant bits of the table word are found in the lowest indexed memory unit."
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "default_lower_huffman_bits_included": {
                    "enum": [
                        7
                    ], 
                    "type": "integer", 
                    "description": "An integer that indicates how many of the hardware meter address bits are being provided by default configuration registers programmed by the compiler.  The meter address field in match overhead never includes the 7 least significant bits of the hardware meter address."
                }, 
                "logical_table_id": {
                    "type": "integer", 
                    "description": "Unique identifier for this logical table within this stage."
                }, 
                "stage_table_type": {
                    "enum": [
                        "meter"
                    ], 
                    "type": "string", 
                    "description": "Type of stage table."
                }, 
                "stage_number": {
                    "type": "integer", 
                    "description": "Number identifying the stage containing this stage table."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Number of entries in this stage table."
                }
            }
        }, 
        "Parser": {
            "additionalProperties": false, 
            "required": [
                "ingress", 
                "egress"
            ], 
            "type": "object", 
            "properties": {
                "ingress": {
                    "items": {
                        "$ref": "#/definitions/PVS"
                    }, 
                    "type": "array", 
                    "description": "Parser value set information for Ingress."
                }, 
                "egress": {
                    "items": {
                        "$ref": "#/definitions/PVS"
                    }, 
                    "type": "array", 
                    "description": "Parser value set information for Egress."
                }
            }
        }, 
        "StatisticsTable": {
            "additionalProperties": false, 
            "required": [
                "name", 
                "handle", 
                "size", 
                "direction", 
                "table_type", 
                "statistics_type", 
                "how_referenced", 
                "enable_pfe", 
                "pfe_bit_position", 
                "packet_counter_resolution", 
                "byte_counter_resolution", 
                "stage_tables"
            ], 
            "type": "object", 
            "properties": {
                "direction": {
                    "enum": [
                        "ingress", 
                        "egress"
                    ], 
                    "type": "string", 
                    "description": "Whether this table is used for ingress or egress."
                }, 
                "statistics_type": {
                    "enum": [
                        "packets", 
                        "bytes", 
                        "packets_and_bytes"
                    ], 
                    "type": "string", 
                    "description": "Type of statistics that are being gathered, [packets], [bytes] or [packets_and_bytes]."
                }, 
                "handle": {
                    "type": "integer", 
                    "description": "Unique identifier for this table."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of this table."
                }, 
                "stage_tables": {
                    "items": {
                        "$ref": "#/definitions/StatisticsStageTable"
                    }, 
                    "type": "array", 
                    "description": "An array of stage-specific resource objects for this statistics table."
                }, 
                "byte_counter_resolution": {
                    "type": "integer", 
                    "description": "FIXME"
                }, 
                "table_type": {
                    "enum": [
                        "statistics"
                    ], 
                    "type": "string", 
                    "description": "Type of table."
                }, 
                "how_referenced": {
                    "enum": [
                        "direct", 
                        "indirect"
                    ], 
                    "type": "string", 
                    "description": "Whether the table is directly or indirectly referenced."
                }, 
                "packet_counter_resolution": {
                    "type": "integer", 
                    "description": "FIXME"
                }, 
                "pfe_bit_position": {
                    "type": "integer", 
                    "description": "An integer indicating the bit position in the statistics address field in match overhead, from the least significant bit position, of the PFE bit."
                }, 
                "enable_pfe": {
                    "type": "boolean", 
                    "description": "A Boolean indicating whether the per-flow enable (PFE) bit needs to be included in the statistics address in the match table overhead."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Minimum size of this table, as specified in P4."
                }
            }
        }, 
        "XbarResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "size", 
                "exact_size", 
                "ternary_size", 
                "bytes"
            ], 
            "type": "object", 
            "properties": {
                "ternary_size": {
                    "type": "integer", 
                    "description": "Total number of bytes in the ternary match section of the match input crossbar."
                }, 
                "bytes": {
                    "items": {
                        "$ref": "#/definitions/XbarByteUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of used match input crossbar byte resource utilization information."
                }, 
                "exact_size": {
                    "type": "integer", 
                    "description": "Total number of bytes in the exact match section of the match input crossbar."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Total number of bytes in the match input crossbar."
                }
            }
        }, 
        "CLPMMatchTableAttr": {
            "additionalProperties": false, 
            "required": [
                "match_type", 
                "prefix_length", 
                "units"
            ], 
            "type": "object", 
            "properties": {
                "units": {
                    "items": {
                        "$ref": "#/definitions/MatchTable"
                    }, 
                    "type": "array", 
                    "description": "List of match tables that are prefixes to this CLPM match."
                }, 
                "stage_tables": {
                    "type": "array", 
                    "maxItems": 0
                }, 
                "match_type": {
                    "enum": [
                        "chained_lpm"
                    ], 
                    "type": "string", 
                    "description": "Type of match table."
                }, 
                "prefix_length": {
                    "type": "integer", 
                    "description": "Bit width of the prefix field."
                }
            }
        }, 
        "ATCAMMatchTableAttr": {
            "additionalProperties": false, 
            "required": [
                "match_type", 
                "units", 
                "number_partitions", 
                "partition_field_name"
            ], 
            "type": "object", 
            "properties": {
                "units": {
                    "items": {
                        "$ref": "#/definitions/MatchTable"
                    }, 
                    "type": "array", 
                    "description": "List of ATCAM algorithmic units related to this ATCAM table."
                }, 
                "number_partitions": {
                    "type": "integer", 
                    "description": "Number of partitions in this ATCAM table."
                }, 
                "partition_field_name": {
                    "type": "string", 
                    "description": "Name of the field used to partition entries."
                }, 
                "match_type": {
                    "enum": [
                        "algorithmic_tcam"
                    ], 
                    "type": "string", 
                    "description": "Type of match table."
                }, 
                "stage_tables": {
                    "type": "array", 
                    "maxItems": 0
                }
            }
        }, 
        "DynamicHashStageConfiguration": {
            "additionalProperties": false, 
            "required": [
                "stage_number", 
                "crossbar", 
                "hash", 
                "crossbar_mod", 
                "hash_mod"
            ], 
            "type": "object", 
            "properties": {
                "hash_mod": {
                    "required": [
                        "parity_group_mask_0", 
                        "parity_group_mask_1", 
                        "default_hash_seed", 
                        "galois_field_matrix", 
                        "seed", 
                        "hash_seed_lsb_start_bit", 
                        "hash_id"
                    ], 
                    "type": "object", 
                    "description": "Hash configuration in this stage.", 
                    "properties": {
                        "parity_group_mask_0": {
                            "required": [
                                "and_value", 
                                "or_value"
                            ], 
                            "type": "object", 
                            "description": "Configuration register information that indicates which parity group(s) from the match input crossbar contributes to the hash computation.  This is specifically for array index 0.  The parity group register requires performing read-modify-write, where the value to write back is (read reg & and_value) | or_value.", 
                            "properties": {
                                "and_value": {
                                    "type": "integer", 
                                    "description": "Mask value to apply to value read back from device."
                                }, 
                                "or_value": {
                                    "type": "integer", 
                                    "description": "New configuration value to be OR'd into the value to write back to device."
                                }
                            }
                        }, 
                        "parity_group_mask_1": {
                            "required": [
                                "and_value", 
                                "or_value"
                            ], 
                            "type": "object", 
                            "description": "Configuration register information that indicates which parity group(s) from the match input crossbar contributes to the hash computation.  This is specifically for array index 1.  The parity group register requires performing read-modify-write, where the value to write back is (read reg & and_value) | or_value.", 
                            "properties": {
                                "and_value": {
                                    "type": "integer", 
                                    "description": "Mask value to apply to value read back from device."
                                }, 
                                "or_value": {
                                    "type": "integer", 
                                    "description": "New configuration value to be OR'd into the value to write back to device."
                                }
                            }
                        }, 
                        "default_hash_seed": {
                            "type": "integer", 
                            "description": "The default hash seed value programmed for this specific hash function.  This can be a 52-bit value.  FIXME: May break: cJSON only takes 32-bit ints!"
                        }, 
                        "galois_field_matrix": {
                            "items": {
                                "required": [
                                    "hash_bit", 
                                    "valid_1", 
                                    "valid_0", 
                                    "byte_1", 
                                    "byte_0", 
                                    "byte_pair_index"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "hash_bit": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3, 
                                            4, 
                                            5, 
                                            6, 
                                            7, 
                                            8, 
                                            9, 
                                            10, 
                                            11, 
                                            12, 
                                            13, 
                                            14, 
                                            15, 
                                            16, 
                                            17, 
                                            18, 
                                            19, 
                                            20, 
                                            21, 
                                            22, 
                                            23, 
                                            24, 
                                            25, 
                                            26, 
                                            27, 
                                            28, 
                                            29, 
                                            30, 
                                            31, 
                                            32, 
                                            33, 
                                            34, 
                                            35, 
                                            36, 
                                            37, 
                                            38, 
                                            39, 
                                            40, 
                                            41, 
                                            42, 
                                            43, 
                                            44, 
                                            45, 
                                            46, 
                                            47, 
                                            48, 
                                            49, 
                                            50, 
                                            51
                                        ], 
                                        "type": "integer", 
                                        "description": "Array index that indicates the specific hash bit being configured."
                                    }, 
                                    "valid_1": {
                                        "type": "integer", 
                                        "description": "Configuration value indicating if byte 1's container validity bit contributes to this hash bit."
                                    }, 
                                    "valid_0": {
                                        "type": "integer", 
                                        "description": "Configuration value indicating if byte 0's container validity bit contributes to this hash bit."
                                    }, 
                                    "byte_1": {
                                        "type": "integer", 
                                        "description": "Configuration value indicating which bits of byte 1 contribute to this hash bit."
                                    }, 
                                    "byte_0": {
                                        "type": "integer", 
                                        "description": "Configuration value indicating which bits of byte 0 contribute to this hash bit."
                                    }, 
                                    "byte_pair_index": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3, 
                                            4, 
                                            5, 
                                            6, 
                                            7, 
                                            8, 
                                            9, 
                                            10, 
                                            11, 
                                            12, 
                                            13, 
                                            14, 
                                            15, 
                                            16, 
                                            17, 
                                            18, 
                                            19, 
                                            20, 
                                            21, 
                                            22, 
                                            23, 
                                            24, 
                                            25, 
                                            26, 
                                            27, 
                                            28, 
                                            29, 
                                            30, 
                                            31, 
                                            32, 
                                            33, 
                                            34, 
                                            35, 
                                            36, 
                                            37, 
                                            38, 
                                            39, 
                                            40, 
                                            41, 
                                            42, 
                                            43, 
                                            44, 
                                            45, 
                                            46, 
                                            47, 
                                            48, 
                                            49, 
                                            50, 
                                            51, 
                                            52, 
                                            53, 
                                            54, 
                                            55, 
                                            56, 
                                            57, 
                                            58, 
                                            59, 
                                            60, 
                                            61, 
                                            62, 
                                            63
                                        ], 
                                        "type": "integer", 
                                        "description": "Array index that indicates a pair of byte/valid configuration."
                                    }
                                }
                            }, 
                            "type": "array", 
                            "description": "Galois field matrix for this hash."
                        }, 
                        "seed": {
                            "items": {
                                "required": [
                                    "hash_bit", 
                                    "and_value", 
                                    "or_value"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "hash_bit": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3, 
                                            4, 
                                            5, 
                                            6, 
                                            7, 
                                            8, 
                                            9, 
                                            10, 
                                            11, 
                                            12, 
                                            13, 
                                            14, 
                                            15, 
                                            16, 
                                            17, 
                                            18, 
                                            19, 
                                            20, 
                                            21, 
                                            22, 
                                            23, 
                                            24, 
                                            25, 
                                            26, 
                                            27, 
                                            28, 
                                            29, 
                                            30, 
                                            31, 
                                            32, 
                                            33, 
                                            34, 
                                            35, 
                                            36, 
                                            37, 
                                            38, 
                                            39, 
                                            40, 
                                            41, 
                                            42, 
                                            43, 
                                            44, 
                                            45, 
                                            46, 
                                            47, 
                                            48, 
                                            49, 
                                            50, 
                                            51
                                        ], 
                                        "type": "integer", 
                                        "description": "Array index that indicates the specific hash bit being configured."
                                    }, 
                                    "and_value": {
                                        "type": "integer", 
                                        "description": "Mask value to apply to value read back from device."
                                    }, 
                                    "or_value": {
                                        "type": "integer", 
                                        "description": "New configuration value to be OR'd into the value to write back to device."
                                    }
                                }
                            }, 
                            "type": "array", 
                            "description": "Configuration register information that indicates the seed to apply to this hash function.  The seed register requires performing read-modify-write, where the value to write back is (read reg & and_value) | or_value."
                        }, 
                        "hash_seed_lsb_start_bit": {
                            "type": "integer", 
                            "description": "The start bit, from the least significant position, of where this seed (and hash function) begin. Only relevant for the hash_mod node."
                        }, 
                        "hash_id": {
                            "enum": [
                                0, 
                                1, 
                                2, 
                                3, 
                                4, 
                                5, 
                                6, 
                                7
                            ], 
                            "type": "integer", 
                            "description": "The hardware hash function ID in use."
                        }
                    }
                }, 
                "stage_number": {
                    "type": "integer", 
                    "description": "Number identifying this stage."
                }, 
                "hash": {
                    "required": [
                        "parity_group_mask_0", 
                        "parity_group_mask_1", 
                        "default_hash_seed", 
                        "galois_field_matrix", 
                        "seed", 
                        "hash_seed_lsb_start_bit", 
                        "hash_id"
                    ], 
                    "type": "object", 
                    "description": "Hash configuration in this stage.", 
                    "properties": {
                        "parity_group_mask_0": {
                            "required": [
                                "and_value", 
                                "or_value"
                            ], 
                            "type": "object", 
                            "description": "Configuration register information that indicates which parity group(s) from the match input crossbar contributes to the hash computation.  This is specifically for array index 0.  The parity group register requires performing read-modify-write, where the value to write back is (read reg & and_value) | or_value.", 
                            "properties": {
                                "and_value": {
                                    "type": "integer", 
                                    "description": "Mask value to apply to value read back from device."
                                }, 
                                "or_value": {
                                    "type": "integer", 
                                    "description": "New configuration value to be OR'd into the value to write back to device."
                                }
                            }
                        }, 
                        "parity_group_mask_1": {
                            "required": [
                                "and_value", 
                                "or_value"
                            ], 
                            "type": "object", 
                            "description": "Configuration register information that indicates which parity group(s) from the match input crossbar contributes to the hash computation.  This is specifically for array index 1.  The parity group register requires performing read-modify-write, where the value to write back is (read reg & and_value) | or_value.", 
                            "properties": {
                                "and_value": {
                                    "type": "integer", 
                                    "description": "Mask value to apply to value read back from device."
                                }, 
                                "or_value": {
                                    "type": "integer", 
                                    "description": "New configuration value to be OR'd into the value to write back to device."
                                }
                            }
                        }, 
                        "default_hash_seed": {
                            "type": "integer", 
                            "description": "The default hash seed value programmed for this specific hash function.  This can be a 52-bit value.  FIXME: May break: cJSON only takes 32-bit ints!"
                        }, 
                        "galois_field_matrix": {
                            "items": {
                                "required": [
                                    "hash_bit", 
                                    "valid_1", 
                                    "valid_0", 
                                    "byte_1", 
                                    "byte_0", 
                                    "byte_pair_index"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "hash_bit": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3, 
                                            4, 
                                            5, 
                                            6, 
                                            7, 
                                            8, 
                                            9, 
                                            10, 
                                            11, 
                                            12, 
                                            13, 
                                            14, 
                                            15, 
                                            16, 
                                            17, 
                                            18, 
                                            19, 
                                            20, 
                                            21, 
                                            22, 
                                            23, 
                                            24, 
                                            25, 
                                            26, 
                                            27, 
                                            28, 
                                            29, 
                                            30, 
                                            31, 
                                            32, 
                                            33, 
                                            34, 
                                            35, 
                                            36, 
                                            37, 
                                            38, 
                                            39, 
                                            40, 
                                            41, 
                                            42, 
                                            43, 
                                            44, 
                                            45, 
                                            46, 
                                            47, 
                                            48, 
                                            49, 
                                            50, 
                                            51
                                        ], 
                                        "type": "integer", 
                                        "description": "Array index that indicates the specific hash bit being configured."
                                    }, 
                                    "valid_1": {
                                        "type": "integer", 
                                        "description": "Configuration value indicating if byte 1's container validity bit contributes to this hash bit."
                                    }, 
                                    "valid_0": {
                                        "type": "integer", 
                                        "description": "Configuration value indicating if byte 0's container validity bit contributes to this hash bit."
                                    }, 
                                    "byte_1": {
                                        "type": "integer", 
                                        "description": "Configuration value indicating which bits of byte 1 contribute to this hash bit."
                                    }, 
                                    "byte_0": {
                                        "type": "integer", 
                                        "description": "Configuration value indicating which bits of byte 0 contribute to this hash bit."
                                    }, 
                                    "byte_pair_index": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3, 
                                            4, 
                                            5, 
                                            6, 
                                            7, 
                                            8, 
                                            9, 
                                            10, 
                                            11, 
                                            12, 
                                            13, 
                                            14, 
                                            15, 
                                            16, 
                                            17, 
                                            18, 
                                            19, 
                                            20, 
                                            21, 
                                            22, 
                                            23, 
                                            24, 
                                            25, 
                                            26, 
                                            27, 
                                            28, 
                                            29, 
                                            30, 
                                            31, 
                                            32, 
                                            33, 
                                            34, 
                                            35, 
                                            36, 
                                            37, 
                                            38, 
                                            39, 
                                            40, 
                                            41, 
                                            42, 
                                            43, 
                                            44, 
                                            45, 
                                            46, 
                                            47, 
                                            48, 
                                            49, 
                                            50, 
                                            51, 
                                            52, 
                                            53, 
                                            54, 
                                            55, 
                                            56, 
                                            57, 
                                            58, 
                                            59, 
                                            60, 
                                            61, 
                                            62, 
                                            63
                                        ], 
                                        "type": "integer", 
                                        "description": "Array index that indicates a pair of byte/valid configuration."
                                    }
                                }
                            }, 
                            "type": "array", 
                            "description": "Galois field matrix for this hash."
                        }, 
                        "seed": {
                            "items": {
                                "required": [
                                    "hash_bit", 
                                    "and_value", 
                                    "or_value"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "hash_bit": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3, 
                                            4, 
                                            5, 
                                            6, 
                                            7, 
                                            8, 
                                            9, 
                                            10, 
                                            11, 
                                            12, 
                                            13, 
                                            14, 
                                            15, 
                                            16, 
                                            17, 
                                            18, 
                                            19, 
                                            20, 
                                            21, 
                                            22, 
                                            23, 
                                            24, 
                                            25, 
                                            26, 
                                            27, 
                                            28, 
                                            29, 
                                            30, 
                                            31, 
                                            32, 
                                            33, 
                                            34, 
                                            35, 
                                            36, 
                                            37, 
                                            38, 
                                            39, 
                                            40, 
                                            41, 
                                            42, 
                                            43, 
                                            44, 
                                            45, 
                                            46, 
                                            47, 
                                            48, 
                                            49, 
                                            50, 
                                            51
                                        ], 
                                        "type": "integer", 
                                        "description": "Array index that indicates the specific hash bit being configured."
                                    }, 
                                    "and_value": {
                                        "type": "integer", 
                                        "description": "Mask value to apply to value read back from device."
                                    }, 
                                    "or_value": {
                                        "type": "integer", 
                                        "description": "New configuration value to be OR'd into the value to write back to device."
                                    }
                                }
                            }, 
                            "type": "array", 
                            "description": "Configuration register information that indicates the seed to apply to this hash function.  The seed register requires performing read-modify-write, where the value to write back is (read reg & and_value) | or_value."
                        }, 
                        "hash_seed_lsb_start_bit": {
                            "type": "integer", 
                            "description": "The start bit, from the least significant position, of where this seed (and hash function) begin. Only relevant for the hash_mod node."
                        }, 
                        "hash_id": {
                            "enum": [
                                0, 
                                1, 
                                2, 
                                3, 
                                4, 
                                5, 
                                6, 
                                7
                            ], 
                            "type": "integer", 
                            "description": "The hardware hash function ID in use."
                        }
                    }
                }, 
                "crossbar_mod": {
                    "required": [
                        "control_8_16b", 
                        "power", 
                        "control_32b"
                    ], 
                    "type": "object", 
                    "description": "Configuration register information for power gating the match input crossbar extraction.", 
                    "properties": {
                        "control_8_16b": {
                            "items": {
                                "required": [
                                    "enable", 
                                    "mux_select", 
                                    "word_group", 
                                    "output_byte"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "enable": {
                                        "enum": [
                                            0, 
                                            1
                                        ], 
                                        "type": "integer", 
                                        "description": "Enable that indicates to turn on extraction."
                                    }, 
                                    "output_byte": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3, 
                                            4, 
                                            5, 
                                            6, 
                                            7, 
                                            8, 
                                            9, 
                                            10, 
                                            11, 
                                            12, 
                                            13, 
                                            14, 
                                            15, 
                                            16, 
                                            17, 
                                            18, 
                                            19, 
                                            20, 
                                            21, 
                                            22, 
                                            23, 
                                            24, 
                                            25, 
                                            26, 
                                            27, 
                                            28, 
                                            29, 
                                            30, 
                                            31, 
                                            32, 
                                            33, 
                                            34, 
                                            35, 
                                            36, 
                                            37, 
                                            38, 
                                            39, 
                                            40, 
                                            41, 
                                            42, 
                                            43, 
                                            44, 
                                            45, 
                                            46, 
                                            47, 
                                            48, 
                                            49, 
                                            50, 
                                            51, 
                                            52, 
                                            53, 
                                            54, 
                                            55, 
                                            56, 
                                            57, 
                                            58, 
                                            59, 
                                            60, 
                                            61, 
                                            62, 
                                            63, 
                                            64, 
                                            65, 
                                            66, 
                                            67, 
                                            68, 
                                            69, 
                                            70, 
                                            71, 
                                            72, 
                                            73, 
                                            74, 
                                            75, 
                                            76, 
                                            77, 
                                            78, 
                                            79, 
                                            80, 
                                            81, 
                                            82, 
                                            83, 
                                            84, 
                                            85, 
                                            86, 
                                            87, 
                                            88, 
                                            89, 
                                            90, 
                                            91, 
                                            92, 
                                            93, 
                                            94, 
                                            95, 
                                            96, 
                                            97, 
                                            98, 
                                            99, 
                                            100, 
                                            101, 
                                            102, 
                                            103, 
                                            104, 
                                            105, 
                                            106, 
                                            107, 
                                            108, 
                                            109, 
                                            110, 
                                            111, 
                                            112, 
                                            113, 
                                            114, 
                                            115, 
                                            116, 
                                            117, 
                                            118, 
                                            119, 
                                            120, 
                                            121, 
                                            122, 
                                            123, 
                                            124, 
                                            125, 
                                            126, 
                                            127, 
                                            128, 
                                            129, 
                                            130, 
                                            131, 
                                            132, 
                                            133, 
                                            134, 
                                            135, 
                                            136, 
                                            137, 
                                            138, 
                                            139, 
                                            140, 
                                            141, 
                                            142, 
                                            143, 
                                            144, 
                                            145, 
                                            146, 
                                            147, 
                                            148, 
                                            149, 
                                            150, 
                                            151, 
                                            152, 
                                            153, 
                                            154, 
                                            155, 
                                            156, 
                                            157, 
                                            158, 
                                            159, 
                                            160, 
                                            161, 
                                            162, 
                                            163, 
                                            164, 
                                            165, 
                                            166, 
                                            167, 
                                            168, 
                                            169, 
                                            170, 
                                            171, 
                                            172, 
                                            173, 
                                            174, 
                                            175, 
                                            176, 
                                            177, 
                                            178, 
                                            179, 
                                            180, 
                                            181, 
                                            182, 
                                            183, 
                                            184, 
                                            185, 
                                            186, 
                                            187, 
                                            188, 
                                            189, 
                                            190, 
                                            191, 
                                            192, 
                                            193, 
                                            194, 
                                            195
                                        ], 
                                        "type": "integer", 
                                        "description": "Array index to control which crossbar output byte to go to."
                                    }, 
                                    "word_group": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3
                                        ], 
                                        "type": "integer", 
                                        "description": "Array index that selects which group of 8- and 16-bit PHV containers."
                                    }, 
                                    "mux_select": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3, 
                                            4, 
                                            5, 
                                            6, 
                                            7, 
                                            8, 
                                            9, 
                                            10, 
                                            11, 
                                            12, 
                                            13, 
                                            14, 
                                            15, 
                                            16, 
                                            17, 
                                            18, 
                                            19, 
                                            20, 
                                            21, 
                                            22, 
                                            23, 
                                            24, 
                                            25, 
                                            26, 
                                            27, 
                                            28, 
                                            29, 
                                            30, 
                                            31, 
                                            32, 
                                            33, 
                                            34, 
                                            35, 
                                            36, 
                                            37, 
                                            38, 
                                            39
                                        ], 
                                        "type": "integer", 
                                        "description": "Code to select specific PHV container from the group."
                                    }
                                }
                            }, 
                            "type": "array", 
                            "description": "Configuration register information for extracting data from 8-bit and 16-bit PHV containers."
                        }, 
                        "control_32b": {
                            "items": {
                                "required": [
                                    "enable_hi", 
                                    "enable_lo", 
                                    "mux_select", 
                                    "word_group", 
                                    "output_byte"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "enable_hi": {
                                        "enum": [
                                            0, 
                                            1
                                        ], 
                                        "type": "integer", 
                                        "description": "Enable that indicates to select from the high group for a particular word group."
                                    }, 
                                    "enable_lo": {
                                        "enum": [
                                            0, 
                                            1
                                        ], 
                                        "type": "integer", 
                                        "description": "Enable that indicates to select from the low group for a particular word group."
                                    }, 
                                    "output_byte": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3, 
                                            4, 
                                            5, 
                                            6, 
                                            7, 
                                            8, 
                                            9, 
                                            10, 
                                            11, 
                                            12, 
                                            13, 
                                            14, 
                                            15, 
                                            16, 
                                            17, 
                                            18, 
                                            19, 
                                            20, 
                                            21, 
                                            22, 
                                            23, 
                                            24, 
                                            25, 
                                            26, 
                                            27, 
                                            28, 
                                            29, 
                                            30, 
                                            31, 
                                            32, 
                                            33, 
                                            34, 
                                            35, 
                                            36, 
                                            37, 
                                            38, 
                                            39, 
                                            40, 
                                            41, 
                                            42, 
                                            43, 
                                            44, 
                                            45, 
                                            46, 
                                            47, 
                                            48, 
                                            49, 
                                            50, 
                                            51, 
                                            52, 
                                            53, 
                                            54, 
                                            55, 
                                            56, 
                                            57, 
                                            58, 
                                            59, 
                                            60, 
                                            61, 
                                            62, 
                                            63, 
                                            64, 
                                            65, 
                                            66, 
                                            67, 
                                            68, 
                                            69, 
                                            70, 
                                            71, 
                                            72, 
                                            73, 
                                            74, 
                                            75, 
                                            76, 
                                            77, 
                                            78, 
                                            79, 
                                            80, 
                                            81, 
                                            82, 
                                            83, 
                                            84, 
                                            85, 
                                            86, 
                                            87, 
                                            88, 
                                            89, 
                                            90, 
                                            91, 
                                            92, 
                                            93, 
                                            94, 
                                            95, 
                                            96, 
                                            97, 
                                            98, 
                                            99, 
                                            100, 
                                            101, 
                                            102, 
                                            103, 
                                            104, 
                                            105, 
                                            106, 
                                            107, 
                                            108, 
                                            109, 
                                            110, 
                                            111, 
                                            112, 
                                            113, 
                                            114, 
                                            115, 
                                            116, 
                                            117, 
                                            118, 
                                            119, 
                                            120, 
                                            121, 
                                            122, 
                                            123, 
                                            124, 
                                            125, 
                                            126, 
                                            127, 
                                            128, 
                                            129, 
                                            130, 
                                            131, 
                                            132, 
                                            133, 
                                            134, 
                                            135, 
                                            136, 
                                            137, 
                                            138, 
                                            139, 
                                            140, 
                                            141, 
                                            142, 
                                            143, 
                                            144, 
                                            145, 
                                            146, 
                                            147, 
                                            148, 
                                            149, 
                                            150, 
                                            151, 
                                            152, 
                                            153, 
                                            154, 
                                            155, 
                                            156, 
                                            157, 
                                            158, 
                                            159, 
                                            160, 
                                            161, 
                                            162, 
                                            163, 
                                            164, 
                                            165, 
                                            166, 
                                            167, 
                                            168, 
                                            169, 
                                            170, 
                                            171, 
                                            172, 
                                            173, 
                                            174, 
                                            175, 
                                            176, 
                                            177, 
                                            178, 
                                            179, 
                                            180, 
                                            181, 
                                            182, 
                                            183, 
                                            184, 
                                            185, 
                                            186, 
                                            187, 
                                            188, 
                                            189, 
                                            190, 
                                            191, 
                                            192, 
                                            193, 
                                            194, 
                                            195
                                        ], 
                                        "type": "integer", 
                                        "description": "Array index to control which crossbar output byte to go to."
                                    }, 
                                    "word_group": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3
                                        ], 
                                        "type": "integer", 
                                        "description": "Array index that selects which group of 32-bit PHV containers."
                                    }, 
                                    "mux_select": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3, 
                                            4, 
                                            5, 
                                            6, 
                                            7
                                        ], 
                                        "type": "integer", 
                                        "description": "Code to select specific PHV container from the group."
                                    }
                                }
                            }, 
                            "type": "array", 
                            "description": "Configuration register information for extracting data from 32-bit PHV containers."
                        }, 
                        "power": {
                            "items": {
                                "required": [
                                    "byte_group", 
                                    "and_value", 
                                    "byte_index", 
                                    "or_value"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "byte_group": {
                                        "enum": [
                                            0, 
                                            1
                                        ], 
                                        "type": "integer", 
                                        "description": "Array index that selects which group of PHV containers can be selected."
                                    }, 
                                    "and_value": {
                                        "type": "integer", 
                                        "description": "Mask value to apply to value read back from device."
                                    }, 
                                    "byte_index": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3, 
                                            4, 
                                            5, 
                                            6, 
                                            7, 
                                            8, 
                                            9, 
                                            10, 
                                            11, 
                                            12, 
                                            13
                                        ], 
                                        "type": "integer", 
                                        "description": "Array index that selects which byte.  Bytes 0-3 are for 32-bit containers, bytes 4-7 are for 8-bit containers, and bytes 8-13 are for 16-bit containers."
                                    }, 
                                    "or_value": {
                                        "type": "integer", 
                                        "description": "New configuration value to be OR'd into the value to write back to device."
                                    }
                                }
                            }, 
                            "type": "array", 
                            "description": "Power gating registers require performing read-modify-write, where the value to write back is (read reg & and_value) | or_value."
                        }
                    }
                }, 
                "crossbar": {
                    "required": [
                        "control_8_16b", 
                        "power", 
                        "control_32b"
                    ], 
                    "type": "object", 
                    "description": "Configuration register information for power gating the match input crossbar extraction.", 
                    "properties": {
                        "control_8_16b": {
                            "items": {
                                "required": [
                                    "enable", 
                                    "mux_select", 
                                    "word_group", 
                                    "output_byte"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "enable": {
                                        "enum": [
                                            0, 
                                            1
                                        ], 
                                        "type": "integer", 
                                        "description": "Enable that indicates to turn on extraction."
                                    }, 
                                    "output_byte": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3, 
                                            4, 
                                            5, 
                                            6, 
                                            7, 
                                            8, 
                                            9, 
                                            10, 
                                            11, 
                                            12, 
                                            13, 
                                            14, 
                                            15, 
                                            16, 
                                            17, 
                                            18, 
                                            19, 
                                            20, 
                                            21, 
                                            22, 
                                            23, 
                                            24, 
                                            25, 
                                            26, 
                                            27, 
                                            28, 
                                            29, 
                                            30, 
                                            31, 
                                            32, 
                                            33, 
                                            34, 
                                            35, 
                                            36, 
                                            37, 
                                            38, 
                                            39, 
                                            40, 
                                            41, 
                                            42, 
                                            43, 
                                            44, 
                                            45, 
                                            46, 
                                            47, 
                                            48, 
                                            49, 
                                            50, 
                                            51, 
                                            52, 
                                            53, 
                                            54, 
                                            55, 
                                            56, 
                                            57, 
                                            58, 
                                            59, 
                                            60, 
                                            61, 
                                            62, 
                                            63, 
                                            64, 
                                            65, 
                                            66, 
                                            67, 
                                            68, 
                                            69, 
                                            70, 
                                            71, 
                                            72, 
                                            73, 
                                            74, 
                                            75, 
                                            76, 
                                            77, 
                                            78, 
                                            79, 
                                            80, 
                                            81, 
                                            82, 
                                            83, 
                                            84, 
                                            85, 
                                            86, 
                                            87, 
                                            88, 
                                            89, 
                                            90, 
                                            91, 
                                            92, 
                                            93, 
                                            94, 
                                            95, 
                                            96, 
                                            97, 
                                            98, 
                                            99, 
                                            100, 
                                            101, 
                                            102, 
                                            103, 
                                            104, 
                                            105, 
                                            106, 
                                            107, 
                                            108, 
                                            109, 
                                            110, 
                                            111, 
                                            112, 
                                            113, 
                                            114, 
                                            115, 
                                            116, 
                                            117, 
                                            118, 
                                            119, 
                                            120, 
                                            121, 
                                            122, 
                                            123, 
                                            124, 
                                            125, 
                                            126, 
                                            127, 
                                            128, 
                                            129, 
                                            130, 
                                            131, 
                                            132, 
                                            133, 
                                            134, 
                                            135, 
                                            136, 
                                            137, 
                                            138, 
                                            139, 
                                            140, 
                                            141, 
                                            142, 
                                            143, 
                                            144, 
                                            145, 
                                            146, 
                                            147, 
                                            148, 
                                            149, 
                                            150, 
                                            151, 
                                            152, 
                                            153, 
                                            154, 
                                            155, 
                                            156, 
                                            157, 
                                            158, 
                                            159, 
                                            160, 
                                            161, 
                                            162, 
                                            163, 
                                            164, 
                                            165, 
                                            166, 
                                            167, 
                                            168, 
                                            169, 
                                            170, 
                                            171, 
                                            172, 
                                            173, 
                                            174, 
                                            175, 
                                            176, 
                                            177, 
                                            178, 
                                            179, 
                                            180, 
                                            181, 
                                            182, 
                                            183, 
                                            184, 
                                            185, 
                                            186, 
                                            187, 
                                            188, 
                                            189, 
                                            190, 
                                            191, 
                                            192, 
                                            193, 
                                            194, 
                                            195
                                        ], 
                                        "type": "integer", 
                                        "description": "Array index to control which crossbar output byte to go to."
                                    }, 
                                    "word_group": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3
                                        ], 
                                        "type": "integer", 
                                        "description": "Array index that selects which group of 8- and 16-bit PHV containers."
                                    }, 
                                    "mux_select": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3, 
                                            4, 
                                            5, 
                                            6, 
                                            7, 
                                            8, 
                                            9, 
                                            10, 
                                            11, 
                                            12, 
                                            13, 
                                            14, 
                                            15, 
                                            16, 
                                            17, 
                                            18, 
                                            19, 
                                            20, 
                                            21, 
                                            22, 
                                            23, 
                                            24, 
                                            25, 
                                            26, 
                                            27, 
                                            28, 
                                            29, 
                                            30, 
                                            31, 
                                            32, 
                                            33, 
                                            34, 
                                            35, 
                                            36, 
                                            37, 
                                            38, 
                                            39
                                        ], 
                                        "type": "integer", 
                                        "description": "Code to select specific PHV container from the group."
                                    }
                                }
                            }, 
                            "type": "array", 
                            "description": "Configuration register information for extracting data from 8-bit and 16-bit PHV containers."
                        }, 
                        "control_32b": {
                            "items": {
                                "required": [
                                    "enable_hi", 
                                    "enable_lo", 
                                    "mux_select", 
                                    "word_group", 
                                    "output_byte"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "enable_hi": {
                                        "enum": [
                                            0, 
                                            1
                                        ], 
                                        "type": "integer", 
                                        "description": "Enable that indicates to select from the high group for a particular word group."
                                    }, 
                                    "enable_lo": {
                                        "enum": [
                                            0, 
                                            1
                                        ], 
                                        "type": "integer", 
                                        "description": "Enable that indicates to select from the low group for a particular word group."
                                    }, 
                                    "output_byte": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3, 
                                            4, 
                                            5, 
                                            6, 
                                            7, 
                                            8, 
                                            9, 
                                            10, 
                                            11, 
                                            12, 
                                            13, 
                                            14, 
                                            15, 
                                            16, 
                                            17, 
                                            18, 
                                            19, 
                                            20, 
                                            21, 
                                            22, 
                                            23, 
                                            24, 
                                            25, 
                                            26, 
                                            27, 
                                            28, 
                                            29, 
                                            30, 
                                            31, 
                                            32, 
                                            33, 
                                            34, 
                                            35, 
                                            36, 
                                            37, 
                                            38, 
                                            39, 
                                            40, 
                                            41, 
                                            42, 
                                            43, 
                                            44, 
                                            45, 
                                            46, 
                                            47, 
                                            48, 
                                            49, 
                                            50, 
                                            51, 
                                            52, 
                                            53, 
                                            54, 
                                            55, 
                                            56, 
                                            57, 
                                            58, 
                                            59, 
                                            60, 
                                            61, 
                                            62, 
                                            63, 
                                            64, 
                                            65, 
                                            66, 
                                            67, 
                                            68, 
                                            69, 
                                            70, 
                                            71, 
                                            72, 
                                            73, 
                                            74, 
                                            75, 
                                            76, 
                                            77, 
                                            78, 
                                            79, 
                                            80, 
                                            81, 
                                            82, 
                                            83, 
                                            84, 
                                            85, 
                                            86, 
                                            87, 
                                            88, 
                                            89, 
                                            90, 
                                            91, 
                                            92, 
                                            93, 
                                            94, 
                                            95, 
                                            96, 
                                            97, 
                                            98, 
                                            99, 
                                            100, 
                                            101, 
                                            102, 
                                            103, 
                                            104, 
                                            105, 
                                            106, 
                                            107, 
                                            108, 
                                            109, 
                                            110, 
                                            111, 
                                            112, 
                                            113, 
                                            114, 
                                            115, 
                                            116, 
                                            117, 
                                            118, 
                                            119, 
                                            120, 
                                            121, 
                                            122, 
                                            123, 
                                            124, 
                                            125, 
                                            126, 
                                            127, 
                                            128, 
                                            129, 
                                            130, 
                                            131, 
                                            132, 
                                            133, 
                                            134, 
                                            135, 
                                            136, 
                                            137, 
                                            138, 
                                            139, 
                                            140, 
                                            141, 
                                            142, 
                                            143, 
                                            144, 
                                            145, 
                                            146, 
                                            147, 
                                            148, 
                                            149, 
                                            150, 
                                            151, 
                                            152, 
                                            153, 
                                            154, 
                                            155, 
                                            156, 
                                            157, 
                                            158, 
                                            159, 
                                            160, 
                                            161, 
                                            162, 
                                            163, 
                                            164, 
                                            165, 
                                            166, 
                                            167, 
                                            168, 
                                            169, 
                                            170, 
                                            171, 
                                            172, 
                                            173, 
                                            174, 
                                            175, 
                                            176, 
                                            177, 
                                            178, 
                                            179, 
                                            180, 
                                            181, 
                                            182, 
                                            183, 
                                            184, 
                                            185, 
                                            186, 
                                            187, 
                                            188, 
                                            189, 
                                            190, 
                                            191, 
                                            192, 
                                            193, 
                                            194, 
                                            195
                                        ], 
                                        "type": "integer", 
                                        "description": "Array index to control which crossbar output byte to go to."
                                    }, 
                                    "word_group": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3
                                        ], 
                                        "type": "integer", 
                                        "description": "Array index that selects which group of 32-bit PHV containers."
                                    }, 
                                    "mux_select": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3, 
                                            4, 
                                            5, 
                                            6, 
                                            7
                                        ], 
                                        "type": "integer", 
                                        "description": "Code to select specific PHV container from the group."
                                    }
                                }
                            }, 
                            "type": "array", 
                            "description": "Configuration register information for extracting data from 32-bit PHV containers."
                        }, 
                        "power": {
                            "items": {
                                "required": [
                                    "byte_group", 
                                    "and_value", 
                                    "byte_index", 
                                    "or_value"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "byte_group": {
                                        "enum": [
                                            0, 
                                            1
                                        ], 
                                        "type": "integer", 
                                        "description": "Array index that selects which group of PHV containers can be selected."
                                    }, 
                                    "and_value": {
                                        "type": "integer", 
                                        "description": "Mask value to apply to value read back from device."
                                    }, 
                                    "byte_index": {
                                        "enum": [
                                            0, 
                                            1, 
                                            2, 
                                            3, 
                                            4, 
                                            5, 
                                            6, 
                                            7, 
                                            8, 
                                            9, 
                                            10, 
                                            11, 
                                            12, 
                                            13
                                        ], 
                                        "type": "integer", 
                                        "description": "Array index that selects which byte.  Bytes 0-3 are for 32-bit containers, bytes 4-7 are for 8-bit containers, and bytes 8-13 are for 16-bit containers."
                                    }, 
                                    "or_value": {
                                        "type": "integer", 
                                        "description": "New configuration value to be OR'd into the value to write back to device."
                                    }
                                }
                            }, 
                            "type": "array", 
                            "description": "Power gating registers require performing read-modify-write, where the value to write back is (read reg & and_value) | or_value."
                        }
                    }
                }
            }
        }, 
        "HashMatchMemoryResourceAllocation": {
            "additionalProperties": false, 
            "required": [
                "memory_units_and_vpns", 
                "hash_function_id", 
                "hash_select_bit_lo", 
                "hash_select_bit_hi", 
                "hash_entry_bit_lo", 
                "hash_entry_bit_hi", 
                "number_select_bits", 
                "number_entry_bits"
            ], 
            "type": "object", 
            "properties": {
                "number_select_bits": {
                    "type": "integer", 
                    "description": "Number of hash bits used for selecting the RAM. Values allowed: 0-12 (inclusive)."
                }, 
                "hash_select_bit_hi": {
                    "type": "integer", 
                    "description": "Position of the most significant bit boundary in the 52-bit hash value to use to activate a RAM unit. Values allowed: 40-51 (inclusive)."
                }, 
                "number_entry_bits": {
                    "enum": [
                        10
                    ], 
                    "type": "integer", 
                    "description": "Number of hash bits used for selecting the word in a RAM."
                }, 
                "hash_entry_bit_lo": {
                    "enum": [
                        0, 
                        10, 
                        20, 
                        30, 
                        40
                    ], 
                    "type": "integer", 
                    "description": "Position of the least significant bit boundary in the 52-bit hash value to use to determine a RAM unit row."
                }, 
                "hash_select_bit_lo": {
                    "type": "integer", 
                    "description": "Position of the least significant bit boundary in the 52-bit hash value to use to activate a RAM unit. Value allowed: 40-51 (inclusive)."
                }, 
                "hash_entry_bit_hi": {
                    "enum": [
                        9, 
                        19, 
                        29, 
                        39, 
                        49
                    ], 
                    "type": "integer", 
                    "description": "Position of the most significant bit boundary in the 52-bit hash value to use to determine a RAM unit row."
                }, 
                "memory_units_and_vpns": {
                    "items": {
                        "required": [
                            "memory_units", 
                            "vpns"
                        ], 
                        "type": "object", 
                        "properties": {
                            "memory_units": {
                                "items": {
                                    "type": "integer"
                                }, 
                                "type": "array", 
                                "description": "An array of SRAM memory unit IDs.  The memory unit ID is 12 * row + col.  Memory IDs are ordered such that the most significant memory appears at the lower list index.  Memory IDs are ordered such that the most significant memory appears at the lower list index."
                            }, 
                            "vpns": {
                                "items": {
                                    "type": "integer"
                                }, 
                                "type": "array", 
                                "description": "An array of VPNs assigned for the match entries packed in these memory units."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "Memory resource allocation information in this ExactMatchStageTable."
                }, 
                "hash_function_id": {
                    "type": "integer", 
                    "description": "Hash function ID that is used to compute the RAM enable select bits and the RAM word entry bits."
                }
            }
        }, 
        "DynamicHashConfiguration": {
            "additionalProperties": false, 
            "required": [
                "combination_sets", 
                "combination_clearing"
            ], 
            "type": "object", 
            "properties": {
                "combination_sets": {
                    "items": {
                        "required": [
                            "field_list_name", 
                            "algorithm_handle", 
                            "combination_id", 
                            "is_default_calculation", 
                            "stage_config_set", 
                            "algorithm_name", 
                            "field_list_handle"
                        ], 
                        "type": "object", 
                        "properties": {
                            "field_list_name": {
                                "type": "string", 
                                "description": "The name of this field list."
                            }, 
                            "algorithm_handle": {
                                "type": "integer", 
                                "description": "Unique integer associated to the algorithm."
                            }, 
                            "algorithm_name": {
                                "type": "string", 
                                "description": "Name of this algorithm."
                            }, 
                            "stage_config_set": {
                                "items": {
                                    "$ref": "#/definitions/DynamicHashStageConfiguration"
                                }, 
                                "type": "array", 
                                "description": "List of stage configurations. Tables can appear in multiple stages with different formats."
                            }, 
                            "is_default_calculation": {
                                "type": "boolean", 
                                "description": "A Boolean indicating whether this calculation is the default one (configured at initialization time)."
                            }, 
                            "combination_id": {
                                "type": "integer", 
                                "description": "Unique integer assigned to each pair of field list and algorithm."
                            }, 
                            "field_list_handle": {
                                "type": "integer", 
                                "description": "Unique integer associated to the field list."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "List of dynamic hashing calculations and their configurations."
                }, 
                "combination_clearing": {
                    "items": {
                        "$ref": "#/definitions/DynamicHashStageConfiguration"
                    }, 
                    "type": "array", 
                    "description": "List of configurations per stage used to clear out any previous selector information."
                }
            }
        }, 
        "TernMatchTableAttr": {
            "additionalProperties": false, 
            "required": [
                "match_type", 
                "stage_tables"
            ], 
            "type": "object", 
            "properties": {
                "prefix_lower": {
                    "type": "integer", 
                    "description": "Minimum prefix length to be used. Only applicable if this table is also a CLPM Unit."
                }, 
                "stage_tables": {
                    "items": {
                        "$ref": "#/definitions/TernMatchStageTable"
                    }, 
                    "type": "array", 
                    "description": "An array of stage-specific resource objects for this match table."
                }, 
                "match_type": {
                    "enum": [
                        "ternary"
                    ], 
                    "type": "string", 
                    "description": "Type of match table."
                }, 
                "prefix_upper": {
                    "type": "integer", 
                    "description": "Maximum prefix length to be used. Only applicable if this table is also a CLPM Unit."
                }, 
                "prefix_length": {
                    "type": "integer", 
                    "description": "Bit width of the prefix field. Only applicable if this table is also a CLPM unit."
                }
            }
        }, 
        "PhvContainerType": {
            "additionalProperties": false, 
            "required": [
                "width", 
                "units", 
                "addresses"
            ], 
            "type": "object", 
            "properties": {
                "units": {
                    "type": "integer", 
                    "description": "The number of containers of this type."
                }, 
                "width": {
                    "type": "integer", 
                    "description": "The bit width of each container."
                }, 
                "addresses": {
                    "items": {
                        "type": "integer"
                    }, 
                    "type": "array", 
                    "description": "Array of the container addresses available."
                }
            }
        }, 
        "ActionDataStageTable": {
            "additionalProperties": false, 
            "required": [
                "stage_table_type", 
                "stage_number", 
                "logical_table_id", 
                "size", 
                "memory_resource_allocation"
            ], 
            "type": "object", 
            "properties": {
                "memory_resource_allocation": {
                    "oneOf": [
                        {
                            "type": "null"
                        }, 
                        {
                            "$ref": "#/definitions/MemoryResourceAllocation"
                        }
                    ], 
                    "description": "Representation of the Memory resource allocation for this stage table."
                }, 
                "pack_format": {
                    "items": {
                        "required": [
                            "entries_per_table_word", 
                            "action_handle", 
                            "memory_word_width", 
                            "table_word_width", 
                            "entries", 
                            "number_memory_units_per_table_word"
                        ], 
                        "type": "object", 
                        "description": "Structure containing information about how the memory for this stage table is layed out.", 
                        "properties": {
                            "entries_per_table_word": {
                                "type": "integer", 
                                "description": "Number of entries that are packed into a given table word."
                            }, 
                            "action_handle": {
                                "type": "integer", 
                                "description": "Action handle to which this pack format refers. On an ActionDataStageTable's pack format, there is one pack format per action."
                            }, 
                            "memory_word_width": {
                                "type": "integer", 
                                "description": "Bit width of a single physical memory word."
                            }, 
                            "table_word_width": {
                                "type": "integer", 
                                "description": "Bit width of the table's word."
                            }, 
                            "entries": {
                                "items": {
                                    "additionalProperties": false, 
                                    "required": [
                                        "entry_number", 
                                        "fields"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "entry_number": {
                                            "type": "integer", 
                                            "description": "Entry number uniquely identifying this entry."
                                        }, 
                                        "fields": {
                                            "items": {
                                                "required": [
                                                    "source", 
                                                    "start_bit", 
                                                    "lsb_mem_word_offset", 
                                                    "lsb_mem_word_idx", 
                                                    "field_width", 
                                                    "field_name"
                                                ], 
                                                "type": "object", 
                                                "description": "Description of a field in an action data stage table.", 
                                                "properties": {
                                                    "is_mod_field_conditionally_value": {
                                                        "type": "boolean", 
                                                        "description": "Indicates whether this field is the value parameter for a modify_field_conditionally primitive."
                                                    }, 
                                                    "start_bit": {
                                                        "type": "integer", 
                                                        "description": "A field could be split in multiple slices. Corresponds to the offset, from the least significant bit, where this slice starts."
                                                    }, 
                                                    "field_width": {
                                                        "type": "integer", 
                                                        "description": "Width of this field, in bits."
                                                    }, 
                                                    "lsb_mem_word_idx": {
                                                        "type": "integer", 
                                                        "description": "Index of the wide word containing the least significant bit of this field."
                                                    }, 
                                                    "const_tuples": {
                                                        "items": {
                                                            "required": [
                                                                "dest_width", 
                                                                "dest_start", 
                                                                "value"
                                                            ], 
                                                            "type": "object", 
                                                            "properties": {
                                                                "dest_width": {
                                                                    "type": "integer", 
                                                                    "description": "Width of this segment of the constant."
                                                                }, 
                                                                "value": {
                                                                    "type": "integer", 
                                                                    "description": "Value of this segment of the constant."
                                                                }, 
                                                                "dest_start": {
                                                                    "type": "integer", 
                                                                    "description": "Index of the least significant bit of this segment of the constant."
                                                                }
                                                            }
                                                        }, 
                                                        "type": "array", 
                                                        "description": "A constant may be split over multiple entries. This list contains information about each segment of a constant."
                                                    }, 
                                                    "source": {
                                                        "enum": [
                                                            "zero", 
                                                            "constant", 
                                                            "spec"
                                                        ], 
                                                        "type": "string", 
                                                        "description": "Type of source that originates this entry."
                                                    }, 
                                                    "mod_field_conditionally_mask_field_name": {
                                                        "type": "string", 
                                                        "description": "Specifies the name of the modify field conditionally condition action parameter.  If that mask field is False (0), the value to encode for this 'value' action parameter has to be 0, regardless of what the API passes in as the value."
                                                    }, 
                                                    "is_mod_field_conditionally_mask": {
                                                        "type": "boolean", 
                                                        "description": "Indicates whether this field is the mask parameter for a modify_field_conditionally primitive.  The API passes in a Boolean, which needs to be replicated into each bit position in this field."
                                                    }, 
                                                    "lsb_mem_word_offset": {
                                                        "type": "integer", 
                                                        "description": "Offset of the least significant bit of the field within this memory word."
                                                    }, 
                                                    "field_name": {
                                                        "type": "string", 
                                                        "description": "Name of this field."
                                                    }
                                                }
                                            }, 
                                            "type": "array", 
                                            "description": "List of fields in this table."
                                        }
                                    }
                                }, 
                                "type": "array", 
                                "description": "Entries packed in this stage table's memory."
                            }, 
                            "number_memory_units_per_table_word": {
                                "type": "integer", 
                                "description": "Number of units combined together to form a single table word. Notice that for table words that occupy multiple memory units, the most significant bits of the table word are found in the lowest indexed memory unit."
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "logical_table_id": {
                    "type": "integer", 
                    "description": "Unique identifier for this logical table within this stage."
                }, 
                "stage_table_type": {
                    "enum": [
                        "action_data"
                    ], 
                    "type": "string", 
                    "description": "Type of stage table."
                }, 
                "stage_number": {
                    "type": "integer", 
                    "description": "Number identifying the stage containing this stage table."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Number of entries in this stage table."
                }
            }
        }, 
        "ActionDataTable": {
            "additionalProperties": false, 
            "required": [
                "name", 
                "handle", 
                "size", 
                "direction", 
                "table_type", 
                "how_referenced", 
                "actions", 
                "stage_tables"
            ], 
            "type": "object", 
            "properties": {
                "direction": {
                    "enum": [
                        "ingress", 
                        "egress"
                    ], 
                    "type": "string", 
                    "description": "Whether this table is used for ingress or egress."
                }, 
                "handle": {
                    "type": "integer", 
                    "description": "Unique identifier for this table."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of this table."
                }, 
                "stage_tables": {
                    "items": {
                        "$ref": "#/definitions/ActionDataStageTable"
                    }, 
                    "type": "array", 
                    "description": "An array of stage-specific resource objects for this action data table."
                }, 
                "table_type": {
                    "enum": [
                        "action"
                    ], 
                    "type": "string", 
                    "description": "Type of table."
                }, 
                "how_referenced": {
                    "enum": [
                        "direct", 
                        "indirect"
                    ], 
                    "type": "string", 
                    "description": "Whether the table is directly or indirectly referenced."
                }, 
                "actions": {
                    "items": {
                        "required": [
                            "handle", 
                            "indirect_resources", 
                            "override_meter_addr_pfe", 
                            "allowed_as_default_action", 
                            "p4_parameters", 
                            "override_stateful_addr_pfe", 
                            "name", 
                            "override_stat_full_addr", 
                            "override_stat_addr_pfe", 
                            "override_meter_full_addr", 
                            "override_stat_addr", 
                            "override_stateful_addr", 
                            "override_stateful_full_addr", 
                            "override_meter_addr"
                        ], 
                        "type": "object", 
                        "properties": {
                            "p4_parameters": {
                                "items": {
                                    "required": [
                                        "bit_width", 
                                        "name", 
                                        "start_bit"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "default_value": {
                                            "type": "integer", 
                                            "description": "Default value of this parameter, in case this table is the default one."
                                        }, 
                                        "bit_width": {
                                            "type": "integer", 
                                            "description": "The bit width of the parameter."
                                        }, 
                                        "name": {
                                            "type": "string", 
                                            "description": "The name of the parameter from P4."
                                        }, 
                                        "start_bit": {
                                            "type": "integer", 
                                            "description": "The bit offset of this parameter in the action parameter list. This value refers to the most significant bit."
                                        }
                                    }
                                }, 
                                "type": "array", 
                                "description": "An array of P4 parameter properties used by this action."
                            }, 
                            "handle": {
                                "type": "integer", 
                                "description": "A unique identifier for this action."
                            }, 
                            "name": {
                                "type": "string", 
                                "description": "The P4 name of the action."
                            }, 
                            "indirect_resources": {
                                "items": {
                                    "anyOf": [
                                        {
                                            "required": [
                                                "access_mode", 
                                                "resource_name"
                                            ], 
                                            "type": "object", 
                                            "properties": {
                                                "access_mode": {
                                                    "enum": [
                                                        "index"
                                                    ], 
                                                    "type": "string", 
                                                    "description": "The mode used to access the indirect resource. If this value is 'constant', then the indirect resource is accessed through a constant index that cannot be changed at runtime. If it is 'index', the index comes from action data."
                                                }, 
                                                "parameter_index": {
                                                    "type": "integer", 
                                                    "description": "The index of the parameter in the action parameter list."
                                                }, 
                                                "resource_name": {
                                                    "type": "string", 
                                                    "description": "The name of the indirect resource consumed."
                                                }, 
                                                "parameter_name": {
                                                    "type": "string", 
                                                    "description": "The action parameter name corresponding to how the resource is accessed. Only applicable if the access mode is 'index'."
                                                }
                                            }
                                        }, 
                                        {
                                            "required": [
                                                "access_mode", 
                                                "value", 
                                                "resource_name"
                                            ], 
                                            "type": "object", 
                                            "properties": {
                                                "access_mode": {
                                                    "enum": [
                                                        "constant"
                                                    ], 
                                                    "type": "string", 
                                                    "description": "The mode used to access the indirect resource. If this value is 'constant', then the indirect resource is accessed through a constant index that cannot be changed at runtime. If it is 'index', the index comes from action data."
                                                }, 
                                                "value": {
                                                    "type": "integer", 
                                                    "description": "The constant value. Only applicable if the access mode is 'constant'."
                                                }, 
                                                "resource_name": {
                                                    "type": "string", 
                                                    "description": "The name of the indirect resource consumed."
                                                }
                                            }
                                        }
                                    ]
                                }, 
                                "type": "array", 
                                "description": "A list of the indirect resources consumed by this action."
                            }, 
                            "override_stat_full_addr": {
                                "type": "integer", 
                                "description": "The full hardware address of the statistics address to encode in the match overhead.  This is a 20-bit value."
                            }, 
                            "override_meter_addr_pfe": {
                                "type": "boolean", 
                                "description": "A Boolean indicating the driver should always write a 1 to the PFE bit in the meter address in match overhead."
                            }, 
                            "allowed_as_default_action": {
                                "type": "boolean", 
                                "description": "A Boolean indicating if this action can be used as a table default action (the table miss action)."
                            }, 
                            "override_stat_addr_pfe": {
                                "type": "boolean", 
                                "description": "A Boolean indicating the driver should always write a 1 to the PFE bit in the statistics address in match overhead."
                            }, 
                            "disallowed_as_default_action_reason": {
                                "type": "string", 
                                "description": "If this action cannot be used as a default action, a short description indicating the reason it cannot."
                            }, 
                            "override_stateful_addr_pfe": {
                                "type": "boolean", 
                                "description": "A Boolean indicating the driver should always write a 1 to the PFE bit in the stateful address in match overhead."
                            }, 
                            "override_meter_full_addr": {
                                "type": "integer", 
                                "description": "The full hardware address of the meter address to encode in the match overhead.  This is a 27-bit value."
                            }, 
                            "override_stat_addr": {
                                "type": "boolean", 
                                "description": "A Boolean indicating the driver should always write the value indicated in override_stat_full_addr to the statistics address in match overhead."
                            }, 
                            "override_stateful_addr": {
                                "type": "boolean", 
                                "description": "A Boolean indicating the driver should always write the value indicated in override_stateful_full_addr to the stateful address in match overhead."
                            }, 
                            "override_stateful_full_addr": {
                                "type": "integer", 
                                "description": "The full hardware address of the stateful address to encode in the match overhead.  This is a 27-bit value."
                            }, 
                            "override_meter_addr": {
                                "type": "boolean", 
                                "description": "A Boolean indicating the driver should always write the value indicated in override_meter_full_addr to the meter address in match overhead."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "An array of action properties that are available in this action data table."
                }, 
                "static_entries": {
                    "items": {
                        "required": [
                            "match_key", 
                            "action_entry", 
                            "default_entry"
                        ], 
                        "type": "object", 
                        "description": "An array of the static entries to be programmed by the driver.", 
                        "properties": {
                            "priority": {
                                "type": "integer", 
                                "description": "An integer indicating the entry priority.  Not currently used."
                            }, 
                            "match_key": {
                                "items": {
                                    "required": [
                                        "match_type", 
                                        "name", 
                                        "value"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "match_type": {
                                            "enum": [
                                                "exact", 
                                                "lpm", 
                                                "ternary"
                                            ], 
                                            "type": "string", 
                                            "description": "The match type to use for the field."
                                        }, 
                                        "mask": {
                                            "type": "integer", 
                                            "description": "An integer indicating the mask value to program for this field.  This is required if the match type is ternary."
                                        }, 
                                        "name": {
                                            "type": "string", 
                                            "description": "The name of the field."
                                        }, 
                                        "value": {
                                            "type": "integer", 
                                            "description": "An integer indicating the value to program for this field."
                                        }
                                    }
                                }, 
                                "type": "array", 
                                "description": "An array of match key field properties for this entry."
                            }, 
                            "default_entry": {
                                "type": "boolean", 
                                "description": "A Boolean indicating if this is the default table entry."
                            }, 
                            "action_entry": {
                                "required": [
                                    "name", 
                                    "action_data", 
                                    "action_id"
                                ], 
                                "type": "object", 
                                "description": "An array of action properties for this entry.", 
                                "properties": {
                                    "name": {
                                        "type": "string", 
                                        "description": "The name of the action to run."
                                    }, 
                                    "action_data": {
                                        "items": {
                                            "required": [
                                                "name", 
                                                "value"
                                            ], 
                                            "type": "object", 
                                            "properties": {
                                                "name": {
                                                    "type": "string", 
                                                    "description": "The name of the action parameter."
                                                }, 
                                                "value": {
                                                    "type": "integer", 
                                                    "description": "An integer indicating the value to program for this parameter."
                                                }
                                            }
                                        }, 
                                        "type": "array", 
                                        "description": "An array of the action data parameter properties."
                                    }, 
                                    "action_id": {
                                        "type": "integer", 
                                        "description": "The unique handle for the action to run."
                                    }
                                }
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Minimum size of this table, as specified in P4."
                }
            }
        }, 
        "ResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "pipes"
            ], 
            "type": "object", 
            "properties": {
                "pipes": {
                    "items": {
                        "$ref": "#/definitions/PipeResourceUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of pipeline resource utilization information."
                }
            }
        }, 
        "StatefulAluExpressionDetails": {
            "additionalProperties": false, 
            "type": "object", 
            "properties": {
                "operand_2_value": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/StatefulAluExpressionDetails"
                        }, 
                        {
                            "type": "string"
                        }
                    ], 
                    "description": "A field name, reference name, immediate value, binary expression, or unary expression."
                }, 
                "operation": {
                    "type": "string", 
                    "description": "The operation being performed."
                }, 
                "operand_1_type": {
                    "enum": [
                        "phv", 
                        "immediate", 
                        "math", 
                        "memory", 
                        "condition", 
                        "result", 
                        "binary", 
                        "unary"
                    ], 
                    "type": "string", 
                    "description": "The type of operand 1."
                }, 
                "operand_1_value": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/StatefulAluExpressionDetails"
                        }, 
                        {
                            "type": "string"
                        }
                    ], 
                    "description": "A field name, reference name, immediate value, binary expression, or unary expression."
                }, 
                "operand_2_type": {
                    "enum": [
                        "phv", 
                        "immediate", 
                        "math", 
                        "memory", 
                        "condition", 
                        "result", 
                        "binary", 
                        "unary"
                    ], 
                    "type": "string", 
                    "description": "The type of operand 2."
                }
            }
        }, 
        "GatewayStageTable": {
            "additionalProperties": false, 
            "required": [
                "stage_table_type", 
                "stage_number", 
                "logical_table_id", 
                "size", 
                "next_tables"
            ], 
            "type": "object", 
            "properties": {
                "next_tables": {
                    "required": [
                        "false", 
                        "true"
                    ], 
                    "type": "object", 
                    "description": "The next table branch locations (full next table address) for each expression result.", 
                    "properties": {
                        "true": {
                            "type": "integer", 
                            "description": "The full hardware address of the next table to run if the condition evalutes to true.  This is an 8-bit value consisting of {stage, logical table ID}."
                        }, 
                        "false": {
                            "type": "integer", 
                            "description": "The full hardware address of the next table to run if the condition evalutes to false.  This is an 8-bit value consisting of {stage, logical table ID}."
                        }
                    }
                }, 
                "memory_resource_allocation": {
                    "$ref": "#/definitions/ConditionMemoryResourceAllocation"
                }, 
                "pack_format": {
                    "items": {
                        "required": [
                            "memory_word_width", 
                            "table_word_width", 
                            "entries_per_table_word", 
                            "number_memory_units_per_table_word"
                        ], 
                        "type": "object", 
                        "description": "Structure containing information about how the memory for this stage table is layed out.", 
                        "properties": {
                            "memory_word_width": {
                                "type": "integer", 
                                "description": "Bit width of a single physical memory word."
                            }, 
                            "table_word_width": {
                                "type": "integer", 
                                "description": "Bit width of the table's word."
                            }, 
                            "entries_per_table_word": {
                                "type": "integer", 
                                "description": "Number of entries that are packed into a given table word."
                            }, 
                            "number_memory_units_per_table_word": {
                                "type": "integer", 
                                "description": "Number of units combined together to form a single table word. Notice that for table words that occupy multiple memory units, the most significant bits of the table word are found in the lowest indexed memory unit."
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "next_table_names": {
                    "required": [
                        "false", 
                        "true"
                    ], 
                    "type": "object", 
                    "description": "The next table branch locations (names) for each expression result.", 
                    "properties": {
                        "true": {
                            "type": "string", 
                            "description": "The name of the next table to run if the condition evalutes to true."
                        }, 
                        "false": {
                            "type": "string", 
                            "description": "The name of the next table to run if the condition evalutes to false."
                        }
                    }
                }, 
                "logical_table_id": {
                    "type": "integer", 
                    "description": "Unique identifier for this logical table within this stage."
                }, 
                "stage_table_type": {
                    "enum": [
                        "gateway"
                    ], 
                    "type": "string", 
                    "description": "Type of stage table."
                }, 
                "stage_number": {
                    "type": "integer", 
                    "description": "Number identifying the stage containing this stage table."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Number of entries in this stage table."
                }
            }
        }, 
        "ElementUsage": {
            "additionalProperties": false, 
            "required": [
                "used_by"
            ], 
            "type": "object", 
            "properties": {
                "used_by": {
                    "type": "string", 
                    "description": "The P4 table name that is mapped to Phase 0."
                }, 
                "detail": {
                    "type": "string", 
                    "description": "Additional information about how this resource is being used."
                }, 
                "used_for": {
                    "type": "string", 
                    "description": "A short description of what this resource is being used for."
                }
            }
        }, 
        "DynamicHashCalculation": {
            "additionalProperties": false, 
            "required": [
                "name", 
                "handle", 
                "field_list_mask_bits"
            ], 
            "type": "object", 
            "properties": {
                "dynamic_hashing_configuration": {
                    "$ref": "#/definitions/DynamicHashConfiguration"
                }, 
                "field_list_mask_bits": {
                    "items": {
                        "required": [
                            "field_list_name", 
                            "mask_bit_positions"
                        ], 
                        "type": "object", 
                        "properties": {
                            "field_list_name": {
                                "type": "string", 
                                "description": "Field list name."
                            }, 
                            "mask_bit_positions": {
                                "items": {
                                    "required": [
                                        "field_name", 
                                        "mask_bit_position"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "field_name": {
                                            "type": "string", 
                                            "description": "Field name."
                                        }, 
                                        "mask_bit_position": {
                                            "type": "integer", 
                                            "description": "Least significant bit position of the field in the mask.  1=field is on, 0=field is off."
                                        }
                                    }
                                }, 
                                "type": "array", 
                                "description": "Field name to mask bit position enumeration."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "Field list name to dictionary for mask bit position locations."
                }, 
                "handle": {
                    "type": "integer", 
                    "description": "Unique identifier for this hash calculation."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the hash calculation."
                }
            }
        }, 
        "VliwColorUsage": {
            "additionalProperties": false, 
            "required": [
                "color", 
                "gress", 
                "usages"
            ], 
            "type": "object", 
            "properties": {
                "color": {
                    "enum": [
                        0, 
                        1
                    ], 
                    "type": "integer", 
                    "description": "VLIW instruction color."
                }, 
                "usages": {
                    "items": {
                        "$ref": "#/definitions/ElementUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of how this VLIW instruction is used."
                }, 
                "gress": {
                    "enum": [
                        "ingress", 
                        "egress"
                    ], 
                    "type": "string", 
                    "description": "The gress this VLIW instruction belongs to."
                }
            }
        }, 
        "HashActionStageTable": {
            "additionalProperties": false, 
            "required": [
                "stage_table_type", 
                "stage_number", 
                "logical_table_id", 
                "size", 
                "hash_functions", 
                "result_physical_buses", 
                "has_attached_gateway", 
                "default_next_table", 
                "action_format"
            ], 
            "type": "object", 
            "properties": {
                "default_next_table": {
                    "oneOf": [
                        {
                            "type": "integer"
                        }, 
                        {
                            "type": "null"
                        }
                    ], 
                    "description": "Full address of the default next table, if any."
                }, 
                "has_attached_gateway": {
                    "type": "boolean", 
                    "description": "A Boolean indicating if this stage table has an attached gateway."
                }, 
                "action_format": {
                    "items": {
                        "$ref": "#/definitions/ActionHandleFormat"
                    }, 
                    "type": "array", 
                    "description": "List of action handles for this exact match stage table."
                }, 
                "memory_resource_allocation": {
                    "type": "null"
                }, 
                "pack_format": {
                    "items": {
                        "required": [
                            "memory_word_width", 
                            "table_word_width", 
                            "entries_per_table_word", 
                            "number_memory_units_per_table_word"
                        ], 
                        "type": "object", 
                        "description": "Structure containing information about how the memory for this stage table is layed out.", 
                        "properties": {
                            "memory_word_width": {
                                "type": "integer", 
                                "description": "Bit width of a single physical memory word."
                            }, 
                            "table_word_width": {
                                "type": "integer", 
                                "description": "Bit width of the table's word."
                            }, 
                            "entries_per_table_word": {
                                "type": "integer", 
                                "description": "Number of entries that are packed into a given table word."
                            }, 
                            "number_memory_units_per_table_word": {
                                "type": "integer", 
                                "description": "Number of units combined together to form a single table word. Notice that for table words that occupy multiple memory units, the most significant bits of the table word are found in the lowest indexed memory unit."
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "idletime_stage_table": {
                    "$ref": "#/definitions/IdletimeStageTable"
                }, 
                "hash_functions": {
                    "items": {
                        "$ref": "#/definitions/HashFunction"
                    }, 
                    "type": "array", 
                    "description": "Array of hash functions for this match table."
                }, 
                "result_physical_buses": {
                    "items": {
                        "type": "integer"
                    }, 
                    "type": "array", 
                    "description": "An array of integers corresponding to the physical bus numbers used by this stage table. This information is required for snapshot."
                }, 
                "logical_table_id": {
                    "type": "integer", 
                    "description": "Unique identifier for this logical table within this stage."
                }, 
                "stage_table_type": {
                    "enum": [
                        "hash_action"
                    ], 
                    "type": "string", 
                    "description": "Type of exact match stage table."
                }, 
                "stage_number": {
                    "type": "integer", 
                    "description": "Number identifying the stage containing this stage table."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Number of entries in this stage table."
                }
            }
        }, 
        "ParserResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "parser_id", 
                "gress", 
                "nStates", 
                "states"
            ], 
            "type": "object", 
            "properties": {
                "states": {
                    "items": {
                        "$ref": "#/definitions/ParserStateResourceUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of state resource utilization."
                }, 
                "nStates": {
                    "type": "integer", 
                    "description": "Number of states available in the parser (TCAM rows)."
                }, 
                "parser_id": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3, 
                        4, 
                        5, 
                        6, 
                        7, 
                        8, 
                        9, 
                        10, 
                        11, 
                        12, 
                        13, 
                        14, 
                        15, 
                        16, 
                        17
                    ], 
                    "type": "integer", 
                    "description": "Parser ID"
                }, 
                "gress": {
                    "enum": [
                        "ingress", 
                        "egress"
                    ], 
                    "type": "string", 
                    "description": "The gress this parser belongs to."
                }
            }
        }, 
        "TindStageTable": {
            "additionalProperties": false, 
            "required": [
                "stage_table_type", 
                "stage_number", 
                "size", 
                "memory_resource_allocation", 
                "action_format"
            ], 
            "type": "object", 
            "properties": {
                "action_format": {
                    "items": {
                        "$ref": "#/definitions/ActionHandleFormat"
                    }, 
                    "type": "array", 
                    "description": "List of action handles in this stage table."
                }, 
                "memory_resource_allocation": {
                    "oneOf": [
                        {
                            "type": "null"
                        }, 
                        {
                            "$ref": "#/definitions/MemoryResourceAllocation"
                        }
                    ], 
                    "description": "Representation of the Memory resource allocation for this stage table."
                }, 
                "pack_format": {
                    "items": {
                        "required": [
                            "memory_word_width", 
                            "table_word_width", 
                            "entries", 
                            "entries_per_table_word", 
                            "number_memory_units_per_table_word"
                        ], 
                        "type": "object", 
                        "description": "Structure containing information about how the memory for this stage table is layed out.", 
                        "properties": {
                            "memory_word_width": {
                                "type": "integer", 
                                "description": "Bit width of a single physical memory word."
                            }, 
                            "table_word_width": {
                                "type": "integer", 
                                "description": "Bit width of the table's word."
                            }, 
                            "number_memory_units_per_table_word": {
                                "type": "integer", 
                                "description": "Number of units combined together to form a single table word. Notice that for table words that occupy multiple memory units, the most significant bits of the table word are found in the lowest indexed memory unit."
                            }, 
                            "entries_per_table_word": {
                                "type": "integer", 
                                "description": "Number of entries that are packed into a given table word."
                            }, 
                            "entries": {
                                "items": {
                                    "additionalProperties": false, 
                                    "required": [
                                        "entry_number", 
                                        "fields"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "entry_number": {
                                            "type": "integer", 
                                            "description": "Entry number uniquely identifying this entry."
                                        }, 
                                        "fields": {
                                            "items": {
                                                "required": [
                                                    "lsb_mem_word_offset", 
                                                    "source", 
                                                    "start_bit", 
                                                    "msb_mem_word_idx", 
                                                    "lsb_mem_word_idx", 
                                                    "field_width", 
                                                    "field_name", 
                                                    "enable_pfe"
                                                ], 
                                                "type": "object", 
                                                "description": "Description of a field in a ternary indirection table.", 
                                                "properties": {
                                                    "start_bit": {
                                                        "type": "integer", 
                                                        "description": "A field could be split in multiple slices. Corresponds to the offset, from the least significant bit, where this slice starts."
                                                    }, 
                                                    "source": {
                                                        "enum": [
                                                            "zero", 
                                                            "instr", 
                                                            "adt_ptr", 
                                                            "meter_ptr", 
                                                            "stats_ptr", 
                                                            "stful_ptr", 
                                                            "sel_ptr", 
                                                            "next_table", 
                                                            "selection_length", 
                                                            "selection_length_shift", 
                                                            "immediate"
                                                        ], 
                                                        "type": "string", 
                                                        "description": "Type of source that originated this entry."
                                                    }, 
                                                    "field_width": {
                                                        "type": "integer", 
                                                        "description": "Width of a field in bits."
                                                    }, 
                                                    "lsb_mem_word_idx": {
                                                        "type": "integer", 
                                                        "description": "Index of the wide word containing the least significant bit of this field."
                                                    }, 
                                                    "immediate_name": {
                                                        "type": "string", 
                                                        "description": "Name of the [source] field, if it was an IMMEDIATE source."
                                                    }, 
                                                    "msb_mem_word_idx": {
                                                        "type": "integer", 
                                                        "description": "Index of the wide word containing the most significant bit of this field."
                                                    }, 
                                                    "lsb_mem_word_offset": {
                                                        "type": "integer", 
                                                        "description": "Offset, within a table word, corresponding to the start of this field, starting from the least significant bit."
                                                    }, 
                                                    "field_name": {
                                                        "type": "string", 
                                                        "description": "Name of this field."
                                                    }, 
                                                    "enable_pfe": {
                                                        "type": "boolean", 
                                                        "description": "Whether to enable or disable per flow enable functionality on this entry."
                                                    }
                                                }
                                            }, 
                                            "type": "array", 
                                            "description": "List of fields in this table."
                                        }
                                    }
                                }, 
                                "type": "array", 
                                "description": "Entries packed in this stage table's memory."
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "logical_table_id": {
                    "type": "integer", 
                    "description": "Unique identifier for this stage table within the stage. This is not required for TernaryIndirection."
                }, 
                "stage_table_type": {
                    "enum": [
                        "ternary_indirection"
                    ], 
                    "type": "string", 
                    "description": "Type of stage table."
                }, 
                "stage_number": {
                    "type": "integer", 
                    "description": "Number identifying the stage containing this stage table."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Number of entries in this stage table."
                }
            }
        }, 
        "LearnQuanta": {
            "additionalProperties": false, 
            "required": [
                "name", 
                "handle", 
                "lq_cfg_type", 
                "fields"
            ], 
            "type": "object", 
            "properties": {
                "fields": {
                    "items": {
                        "required": [
                            "field_width", 
                            "start_byte", 
                            "field_name", 
                            "start_bit"
                        ], 
                        "type": "object", 
                        "description": "Dictionary containing the field name and its width.", 
                        "properties": {
                            "field_width": {
                                "type": "integer", 
                                "description": "Bit width of this field."
                            }, 
                            "start_byte": {
                                "type": "integer", 
                                "description": "FIXME The start byte of the field from which the learner will take information from."
                            }, 
                            "field_name": {
                                "type": "string", 
                                "description": "Name of this field."
                            }, 
                            "start_bit": {
                                "type": "integer", 
                                "description": "FIXME The start bit of the field from which the learner will take information from."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "List of fields in this learn quanta."
                }, 
                "lq_cfg_type": {
                    "type": "integer", 
                    "description": "An int representing the unique hardware ID that has been given to this field list, if used for hardware learning (generate digest)."
                }, 
                "handle": {
                    "type": "integer", 
                    "description": "Unique identifier to this learn quanta."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the field list in the learn quanta."
                }
            }
        }, 
        "ConditionMemoryResourceAllocation": {
            "additionalProperties": false, 
            "required": [
                "memory_unit", 
                "memory_type", 
                "payload_buses"
            ], 
            "type": "object", 
            "properties": {
                "payload_buses": {
                    "items": {
                        "required": [
                            "bus_type", 
                            "data_value", 
                            "bus_id", 
                            "match_address_value"
                        ], 
                        "type": "object", 
                        "properties": {
                            "bus_type": {
                                "enum": [
                                    "exact", 
                                    "ternary"
                                ], 
                                "type": "string", 
                                "description": "The type of payload result bus."
                            }, 
                            "bus_id": {
                                "type": "integer", 
                                "description": "The payload result bus ID."
                            }, 
                            "data_value": {
                                "type": "integer", 
                                "description": "The 64-bit value provided as the payload result when the gateway inhibits."
                            }, 
                            "match_address_value": {
                                "type": "integer", 
                                "description": "The 19-bit value provided as the match address value when the gateway inhibits."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "Memory resource allocation information in this ExactMatchStageTable."
                }, 
                "memory_unit": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3, 
                        4, 
                        5, 
                        6, 
                        7, 
                        8, 
                        9, 
                        10, 
                        11, 
                        12, 
                        13, 
                        14, 
                        15
                    ], 
                    "type": "integer", 
                    "description": "An int representing the gateway unit number."
                }, 
                "memory_type": {
                    "enum": [
                        "gateway"
                    ], 
                    "type": "string", 
                    "description": "Type of memory allocated."
                }
            }
        }, 
        "ActionDataResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "size", 
                "bytes"
            ], 
            "type": "object", 
            "properties": {
                "bytes": {
                    "items": {
                        "$ref": "#/definitions/ActionDataByteUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of used action data bus bytes."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Total number of bytes in the action data bus."
                }
            }
        }, 
        "ActionHandleFormat": {
            "additionalProperties": false, 
            "required": [
                "vliw_instruction", 
                "vliw_instruction_full", 
                "next_table", 
                "next_table_full", 
                "action_handle", 
                "immediate_fields"
            ], 
            "type": "object", 
            "properties": {
                "vliw_instruction_full": {
                    "type": "integer", 
                    "description": "Full VLIW address. This value is necessary in case this action is used as default.."
                }, 
                "next_table": {
                    "type": "integer", 
                    "description": "The next table address for the driver to use when programming the match overhead.  This can be less than 8 bits if the hardware indirection table is used."
                }, 
                "next_table_full": {
                    "type": "integer", 
                    "description": "The full hardware address of the next table pointer to use when this action is called.  This is an 8-bit value consisting of {stage, logical table ID}."
                }, 
                "action_handle": {
                    "type": "integer", 
                    "description": "The handle of this particular action."
                }, 
                "action_name": {
                    "type": "string", 
                    "description": "The name of the action."
                }, 
                "table_name": {
                    "type": "string", 
                    "description": "The name of the match table."
                }, 
                "immediate_fields": {
                    "items": {
                        "anyOf": [
                            {
                                "required": [
                                    "param_name", 
                                    "dest_width", 
                                    "param_type", 
                                    "dest_start", 
                                    "param_shift"
                                ], 
                                "type": "object", 
                                "description": "An action parameter stored in match overhead, for the case of a parameter (non-constant) overhead.", 
                                "properties": {
                                    "param_name": {
                                        "type": "string", 
                                        "description": "The name of the parameter."
                                    }, 
                                    "is_mod_field_conditionally_value": {
                                        "type": "boolean", 
                                        "description": "Indicates whether this field is the value parameter for a modify_field_conditionally primitive."
                                    }, 
                                    "dest_width": {
                                        "type": "integer", 
                                        "description": "Width of the slice being written to the immediate field."
                                    }, 
                                    "mod_field_conditionally_mask_field_name": {
                                        "type": "string", 
                                        "description": "Specifies the name of the modify field conditionally condition action parameter.  If that mask field is False (0), the value to encode for this 'value' action parameter has to be 0, regardless of what the API passes in as the value."
                                    }, 
                                    "param_type": {
                                        "enum": [
                                            "parameter", 
                                            "constant"
                                        ], 
                                        "type": "string", 
                                        "description": "The type of this immediate field."
                                    }, 
                                    "is_mod_field_conditionally_mask": {
                                        "type": "boolean", 
                                        "description": "Indicates whether this field is the mask parameter for a modify_field_conditionally primitive.  The API passes in a Boolean, which needs to be replicated into each bit position in this field."
                                    }, 
                                    "dest_start": {
                                        "type": "integer", 
                                        "description": "Multiple parameters/constants can be mapped to the match overhead immediate field.  This integer indicates the least significant bit in that match overhead field where this immediate field begins."
                                    }, 
                                    "param_shift": {
                                        "type": "integer", 
                                        "description": "The parameter start least significant bit stored in the immediate.  P4 parameters can be stored in match overhead and/or action data tables."
                                    }
                                }
                            }, 
                            {
                                "required": [
                                    "param_name", 
                                    "param_type", 
                                    "dest_start", 
                                    "const_value", 
                                    "dest_width"
                                ], 
                                "type": "object", 
                                "description": "An action parameter stored in match overhead, for the case of a constant (immediate) overhead.", 
                                "properties": {
                                    "param_name": {
                                        "type": "string", 
                                        "description": "The name of the parameter."
                                    }, 
                                    "const_value": {
                                        "type": "integer", 
                                        "description": "Indicates a constant value to be programmed."
                                    }, 
                                    "dest_start": {
                                        "type": "integer", 
                                        "description": "Multiple parameters/constants can be mapped to the match overhead immediate field.  This integer indicates the least significant bit in that match overhead field where this immediate field begins."
                                    }, 
                                    "param_type": {
                                        "enum": [
                                            "parameter", 
                                            "constant"
                                        ], 
                                        "type": "string", 
                                        "description": "The type of this immediate field."
                                    }, 
                                    "dest_width": {
                                        "type": "integer", 
                                        "description": "Width of the slice being written to the immediate field."
                                    }
                                }
                            }
                        ]
                    }, 
                    "type": "array", 
                    "description": "An array of action parameters stored in the match overhead. The parameters can be either from the match spec, or constants."
                }, 
                "vliw_instruction": {
                    "type": "integer", 
                    "description": "The VLIW instruction address."
                }
            }
        }, 
        "MeterTable": {
            "additionalProperties": false, 
            "required": [
                "name", 
                "handle", 
                "size", 
                "direction", 
                "table_type", 
                "meter_type", 
                "meter_granularity", 
                "how_referenced", 
                "enable_pfe", 
                "pfe_bit_position", 
                "enable_color_aware_pfe", 
                "color_aware_pfe_address_type_bit_position", 
                "reference_dictionary", 
                "stage_tables"
            ], 
            "type": "object", 
            "properties": {
                "pre_color_field_name": {
                    "type": "string", 
                    "description": "The name of a pre-color field object used by this meter, if any."
                }, 
                "pfe_bit_position": {
                    "type": "integer", 
                    "description": "An integer indicating the bit position in the meter address field in match overhead, from the least significant bit position, of the PFE bit."
                }, 
                "direction": {
                    "enum": [
                        "ingress", 
                        "egress"
                    ], 
                    "type": "string", 
                    "description": "Whether this table is used for ingress or egress."
                }, 
                "handle": {
                    "type": "integer", 
                    "description": "Unique identifier for this table."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of this table."
                }, 
                "stage_tables": {
                    "items": {
                        "$ref": "#/definitions/MeterStageTable"
                    }, 
                    "type": "array", 
                    "description": "An array of stage-specific resource objects for this meter table."
                }, 
                "table_type": {
                    "enum": [
                        "meter"
                    ], 
                    "type": "string", 
                    "description": "Type of table."
                }, 
                "how_referenced": {
                    "enum": [
                        "direct", 
                        "indirect"
                    ], 
                    "type": "string", 
                    "description": "Whether the table is directly or indirectly referenced."
                }, 
                "color_aware_pfe_address_type_bit_position": {
                    "type": "integer", 
                    "description": "An integer indicating the bit position in the meter address field in match overhead, from the least significant bit position, of the start of the meter address type (3 bits)."
                }, 
                "meter_type": {
                    "enum": [
                        "standard", 
                        "lpf", 
                        "red"
                    ], 
                    "type": "string", 
                    "description": "Type of meter in use."
                }, 
                "enable_color_aware_pfe": {
                    "type": "boolean", 
                    "description": "A Boolean indicating whether the meter address type needs to be included in the meter address in the match table overhead.  This arises if some match table actions use pre-color and some do not."
                }, 
                "meter_granularity": {
                    "enum": [
                        "bytes", 
                        "packets"
                    ], 
                    "type": "string", 
                    "description": "Granularity of meter in use."
                }, 
                "enable_pfe": {
                    "type": "boolean", 
                    "description": "A Boolean indicating whether the per-flow enable (PFE) bit needs to be included in the meter address in the match table overhead."
                }, 
                "reference_dictionary": {
                    "type": "object", 
                    "description": "Dictionary that maps match table names to how it references this meter table. FIXME: This could be removed from future context JSON implementations."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Minimum size of this table, as specified in P4."
                }
            }
        }, 
        "P4Primitive": {
            "additionalProperties": false, 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "The P4 primitive name."
                }, 
                "idx": {
                    "required": [
                        "type", 
                        "name"
                    ], 
                    "type": "object", 
                    "description": "The properties associated with the index used.", 
                    "properties": {
                        "type": {
                            "enum": [
                                "phv", 
                                "action_param", 
                                "immediate", 
                                "header", 
                                "hash"
                            ], 
                            "type": "string", 
                            "description": "The type of this index."
                        }, 
                        "name": {
                            "type": "string", 
                            "description": "The name or value of the source."
                        }, 
                        "algorithm": {
                            "type": "string", 
                            "description": "The name of the hash algorithm being used."
                        }, 
                        "format_type": {
                            "type": "string", 
                            "description": "A user-supplied type for this field, which can be used for string formatting during display."
                        }
                    }
                }, 
                "dst": {
                    "required": [
                        "type", 
                        "name"
                    ], 
                    "type": "object", 
                    "description": "The properties associated with the destination for this primitive.", 
                    "properties": {
                        "type": {
                            "enum": [
                                "phv", 
                                "action_param", 
                                "immediate", 
                                "header", 
                                "hash", 
                                "counter", 
                                "meter", 
                                "stateful"
                            ], 
                            "type": "string", 
                            "description": "The type of the destination."
                        }, 
                        "name": {
                            "type": "string", 
                            "description": "The name of the destination."
                        }, 
                        "format_type": {
                            "type": "string", 
                            "description": "A user-supplied type for this field, which can be used for string formatting during display."
                        }
                    }
                }, 
                "stateful_alu_details": {
                    "$ref": "#/definitions/StatefulAluDetails"
                }, 
                "src2": {
                    "required": [
                        "type", 
                        "name"
                    ], 
                    "type": "object", 
                    "description": "The properties associated with source 2 for this primitive.", 
                    "properties": {
                        "type": {
                            "enum": [
                                "phv", 
                                "action_param", 
                                "immediate", 
                                "header", 
                                "hash"
                            ], 
                            "type": "string", 
                            "description": "The type of source 2."
                        }, 
                        "name": {
                            "type": "string", 
                            "description": "The name or value of source 2."
                        }, 
                        "algorithm": {
                            "type": "string", 
                            "description": "The name of the hash algorithm being used."
                        }, 
                        "format_type": {
                            "type": "string", 
                            "description": "A user-supplied type for this field, which can be used for string formatting during display."
                        }
                    }
                }, 
                "src3": {
                    "required": [
                        "type", 
                        "name"
                    ], 
                    "type": "object", 
                    "description": "The properties associated with source 3 for this primitive.", 
                    "properties": {
                        "type": {
                            "enum": [
                                "immediate"
                            ], 
                            "type": "string", 
                            "description": "The type of source 3."
                        }, 
                        "name": {
                            "type": "string", 
                            "description": "The name or value of source 3."
                        }, 
                        "algorithm": {
                            "type": "string", 
                            "description": "The name of the hash algorithm being used."
                        }, 
                        "format_type": {
                            "type": "string", 
                            "description": "A user-supplied type for this field, which can be used for string formatting during display."
                        }
                    }
                }, 
                "src1": {
                    "required": [
                        "type", 
                        "name"
                    ], 
                    "type": "object", 
                    "description": "The properties associated with source 1 for this primitive.", 
                    "properties": {
                        "type": {
                            "enum": [
                                "phv", 
                                "action_param", 
                                "immediate", 
                                "header", 
                                "hash"
                            ], 
                            "type": "string", 
                            "description": "The type of source 1."
                        }, 
                        "name": {
                            "type": "string", 
                            "description": "The name or value of source 1."
                        }, 
                        "algorithm": {
                            "type": "string", 
                            "description": "The name of the hash algorithm being used."
                        }, 
                        "format_type": {
                            "type": "string", 
                            "description": "A user-supplied type for this field, which can be used for string formatting during display."
                        }
                    }
                }, 
                "cond": {
                    "required": [
                        "type", 
                        "name"
                    ], 
                    "type": "object", 
                    "description": "The properties associated with a condition argument.", 
                    "properties": {
                        "type": {
                            "enum": [
                                "phv", 
                                "action_param", 
                                "immediate", 
                                "header", 
                                "hash"
                            ], 
                            "type": "string", 
                            "description": "The type of this index."
                        }, 
                        "name": {
                            "type": "string", 
                            "description": "The name or value of the condition parameter."
                        }, 
                        "format_type": {
                            "type": "string", 
                            "description": "A user-supplied type for this field, which can be used for string formatting during display."
                        }
                    }
                }, 
                "operation": {
                    "type": "string", 
                    "description": "A more specific indication of the operation performed."
                }, 
                "dst_mask": {
                    "required": [
                        "type", 
                        "name"
                    ], 
                    "type": "object", 
                    "description": "The properties associated with the destination mask for this primitive.", 
                    "properties": {
                        "type": {
                            "enum": [
                                "immediate"
                            ], 
                            "type": "string", 
                            "description": "A mask indicating which bits of the dst will be modified by this operation."
                        }, 
                        "name": {
                            "type": "string", 
                            "description": "The value of the destination mask."
                        }, 
                        "format_type": {
                            "type": "string", 
                            "description": "A user-supplied type for this field, which can be used for string formatting during display."
                        }
                    }
                }
            }
        }, 
        "LogicalTableUsage": {
            "additionalProperties": false, 
            "required": [
                "id", 
                "usages"
            ], 
            "type": "object", 
            "properties": {
                "usages": {
                    "items": {
                        "$ref": "#/definitions/ElementUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of how this logical table ID is used."
                }, 
                "id": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3, 
                        4, 
                        5, 
                        6, 
                        7, 
                        8, 
                        9, 
                        10, 
                        11, 
                        12, 
                        13, 
                        14, 
                        15
                    ], 
                    "type": "integer", 
                    "description": "The logical table ID."
                }
            }
        }, 
        "IdletimeStageTable": {
            "additionalProperties": false, 
            "required": [
                "stage_table_type", 
                "stage_number", 
                "logical_table_id", 
                "size", 
                "memory_resource_allocation", 
                "precision", 
                "disable_notification", 
                "two_way_notification", 
                "enable_pfe"
            ], 
            "type": "object", 
            "properties": {
                "memory_resource_allocation": {
                    "oneOf": [
                        {
                            "type": "null"
                        }, 
                        {
                            "$ref": "#/definitions/MemoryResourceAllocation"
                        }
                    ], 
                    "description": "Representation of the Memory resource allocation for this stage table."
                }, 
                "pack_format": {
                    "items": {
                        "required": [
                            "memory_word_width", 
                            "table_word_width", 
                            "entries_per_table_word", 
                            "number_memory_units_per_table_word"
                        ], 
                        "type": "object", 
                        "description": "Structure containing information about how the memory for this stage table is layed out.", 
                        "properties": {
                            "memory_word_width": {
                                "type": "integer", 
                                "description": "Bit width of a single physical memory word."
                            }, 
                            "table_word_width": {
                                "type": "integer", 
                                "description": "Bit width of the table's word."
                            }, 
                            "entries_per_table_word": {
                                "type": "integer", 
                                "description": "Number of entries that are packed into a given table word."
                            }, 
                            "number_memory_units_per_table_word": {
                                "type": "integer", 
                                "description": "Number of units combined together to form a single table word. Notice that for table words that occupy multiple memory units, the most significant bits of the table word are found in the lowest indexed memory unit."
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "precision": {
                    "type": "integer", 
                    "description": "An integer representing how many bits are stored per idletime entry."
                }, 
                "enable_pfe": {
                    "type": "boolean", 
                    "description": "A Boolean indicating that entry aging can be done on a per-flow basis.  Note that this reserves one of the states in the aging state machine to indicate the entry does not timeout."
                }, 
                "two_way_notification": {
                    "type": "boolean", 
                    "description": "A Boolean indicating if the CPU will be notified when a flow goes from inactive to active.  (For flows that go from active to inactive, the CPU is notified by default.)"
                }, 
                "disable_notification": {
                    "type": "boolean", 
                    "description": "A Boolean indicating that no CPU notification will be sent when the flow state changes."
                }, 
                "logical_table_id": {
                    "type": "integer", 
                    "description": "Unique identifier for this logical table within this stage."
                }, 
                "stage_table_type": {
                    "enum": [
                        "idletime"
                    ], 
                    "type": "string", 
                    "description": "Type of stage table."
                }, 
                "stage_number": {
                    "type": "integer", 
                    "description": "Number identifying the stage containing this stage table."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Number of entries in this stage table."
                }
            }
        }, 
        "MeterAluUsage": {
            "additionalProperties": false, 
            "required": [
                "row", 
                "usages"
            ], 
            "type": "object", 
            "properties": {
                "usages": {
                    "items": {
                        "$ref": "#/definitions/ElementUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of how this Meter ALU unit is used."
                }, 
                "row": {
                    "enum": [
                        1, 
                        3, 
                        5, 
                        7
                    ], 
                    "type": "integer", 
                    "description": "The physical row this Meter ALU is on."
                }
            }
        }, 
        "EgressPacketLengthAdjust": {
            "additionalProperties": false, 
            "required": [
                "field_name", 
                "default_adjustment_value"
            ], 
            "type": "object", 
            "properties": {
                "field_name": {
                    "type": "string", 
                    "description": "The metadata field name to be adjusted."
                }, 
                "default_adjustment_value": {
                    "type": "integer", 
                    "description": "An integer indicating the value to adjust the field by in the default case.  This value is a negative value represented in twos complement, so it should be added to the field to adjust."
                }, 
                "adjustment_values": {
                    "items": {
                        "required": [
                            "match_key_fields_values", 
                            "adjustment_value"
                        ], 
                        "type": "object", 
                        "description": "An array of adjustment values for specific field value combinations.", 
                        "properties": {
                            "match_key_fields_values": {
                                "items": {
                                    "required": [
                                        "field_name", 
                                        "value"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "field_name": {
                                            "type": "string", 
                                            "description": "The name of the field."
                                        }, 
                                        "value": {
                                            "type": "integer", 
                                            "description": "An integer indicating the value this field has for the given adjustment."
                                        }
                                    }
                                }, 
                                "type": "array", 
                                "description": "An array of field properties that must be satisfied to apply this adjustment value."
                            }, 
                            "adjustment_value": {
                                "type": "integer", 
                                "description": "An integer indicating the adjustment value required for this combination.  This value is a negative value represented in twos complement, so it should be added to the field to adjust."
                            }
                        }
                    }, 
                    "type": "array"
                }
            }
        }, 
        "RamResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "nRows", 
                "nColumns", 
                "srams"
            ], 
            "type": "object", 
            "properties": {
                "nRows": {
                    "type": "integer", 
                    "description": "Total number of rows."
                }, 
                "srams": {
                    "items": {
                        "$ref": "#/definitions/RamUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of used rams."
                }, 
                "nColumns": {
                    "type": "integer", 
                    "description": "Total number of columns."
                }
            }
        }, 
        "ATCAMMatchUnitAttr": {
            "additionalProperties": false, 
            "required": [
                "match_type"
            ], 
            "type": "object", 
            "properties": {
                "stage_tables": {
                    "items": {
                        "$ref": "#/definitions/ATCAMMatchStageTable"
                    }, 
                    "type": "array"
                }, 
                "match_type": {
                    "enum": [
                        "algorithmic_tcam_unit"
                    ], 
                    "type": "string", 
                    "description": "Type of match table."
                }
            }
        }, 
        "PhvResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "normal"
            ], 
            "type": "object", 
            "properties": {
                "mocha": {
                    "items": {
                        "$ref": "#/definitions/PhvContainerType"
                    }, 
                    "type": "array", 
                    "description": "Limited function containers in the MAU space."
                }, 
                "dark": {
                    "items": {
                        "$ref": "#/definitions/PhvContainerType"
                    }, 
                    "type": "array", 
                    "description": "Limited function containers in the MAU space."
                }, 
                "tagalong": {
                    "items": {
                        "$ref": "#/definitions/PhvContainerType"
                    }, 
                    "type": "array", 
                    "description": "Containers in tagalong space."
                }, 
                "normal": {
                    "items": {
                        "$ref": "#/definitions/PhvContainerType"
                    }, 
                    "type": "array", 
                    "description": "Fully functional containers in the MAU space."
                }
            }
        }, 
        "MapRamUsage": {
            "additionalProperties": false, 
            "required": [
                "row", 
                "unit_id", 
                "usages"
            ], 
            "type": "object", 
            "properties": {
                "usages": {
                    "items": {
                        "$ref": "#/definitions/ElementUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of how this Map RAM unit is used."
                }, 
                "unit_id": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3, 
                        4, 
                        5
                    ], 
                    "type": "integer", 
                    "description": "The unit ID of this Map RAM.  Note that unit ID 0 corresponds to column 6, 1 to 7, etc."
                }, 
                "row": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3, 
                        4, 
                        5, 
                        6, 
                        7
                    ], 
                    "type": "integer", 
                    "description": "The physical row this Map RAM is on."
                }
            }
        }, 
        "HashBitUsage": {
            "additionalProperties": false, 
            "required": [
                "hash_bit", 
                "hash_function", 
                "usages"
            ], 
            "type": "object", 
            "properties": {
                "hash_bit": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3, 
                        4, 
                        5, 
                        6, 
                        7, 
                        8, 
                        9, 
                        10, 
                        11, 
                        12, 
                        13, 
                        14, 
                        15, 
                        16, 
                        17, 
                        18, 
                        19, 
                        20, 
                        21, 
                        22, 
                        23, 
                        24, 
                        25, 
                        26, 
                        27, 
                        28, 
                        29, 
                        30, 
                        31, 
                        32, 
                        33, 
                        34, 
                        35, 
                        36, 
                        37, 
                        38, 
                        39, 
                        40, 
                        41, 
                        42, 
                        43, 
                        44, 
                        45, 
                        46, 
                        47, 
                        48, 
                        49, 
                        50, 
                        51
                    ], 
                    "type": "integer", 
                    "description": "Hash bit number."
                }, 
                "usages": {
                    "items": {
                        "$ref": "#/definitions/ElementUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of how this hash bit is used."
                }, 
                "hash_function": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3, 
                        4, 
                        5, 
                        6, 
                        7
                    ], 
                    "type": "integer", 
                    "description": "Hash function number."
                }
            }
        }, 
        "PHVStageAllocation": {
            "additionalProperties": false, 
            "required": [
                "stage_number", 
                "ingress", 
                "egress"
            ], 
            "type": "object", 
            "properties": {
                "stage_number": {
                    "type": "integer", 
                    "description": "Number of the stage attached to this PHV."
                }, 
                "egress": {
                    "items": {
                        "$ref": "#/definitions/PHV"
                    }, 
                    "type": "array"
                }, 
                "ingress": {
                    "items": {
                        "$ref": "#/definitions/PHV"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "MapRamResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "nRows", 
                "nUnits", 
                "maprams"
            ], 
            "type": "object", 
            "properties": {
                "nRows": {
                    "type": "integer", 
                    "description": "Total number of rows."
                }, 
                "nUnits": {
                    "type": "integer", 
                    "description": "Total number of units per row."
                }, 
                "maprams": {
                    "items": {
                        "$ref": "#/definitions/MapRamUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of used Map RAM units."
                }
            }
        }, 
        "PipeResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "pipe_id", 
                "parser", 
                "mau_stages", 
                "deparser", 
                "phv_containers"
            ], 
            "type": "object", 
            "properties": {
                "phase0": {
                    "$ref": "#/definitions/Phase0ResourceUsage"
                }, 
                "pipe_id": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3
                    ], 
                    "type": "integer", 
                    "description": "Pipeline ID"
                }, 
                "deparser": {
                    "items": {
                        "$ref": "#/definitions/DeparserResourceUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of deparser resource utilization information."
                }, 
                "phv_containers": {
                    "$ref": "#/definitions/PhvResourceUsage"
                }, 
                "parser": {
                    "$ref": "#/definitions/ParserResources"
                }, 
                "mau_stages": {
                    "items": {
                        "$ref": "#/definitions/MauStageResourceUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of MAU stage resource utilization information."
                }
            }
        }, 
        "StatisticAluUsage": {
            "additionalProperties": false, 
            "required": [
                "row", 
                "usages"
            ], 
            "type": "object", 
            "properties": {
                "usages": {
                    "items": {
                        "$ref": "#/definitions/ElementUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of how this Statistics ALU unit is used."
                }, 
                "row": {
                    "enum": [
                        0, 
                        2, 
                        4, 
                        6
                    ], 
                    "type": "integer", 
                    "description": "The physical row this Statistics ALU is on."
                }
            }
        }, 
        "MauStageResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "stage_number", 
                "xbar_bytes", 
                "hash_bits", 
                "hash_distribution_units", 
                "rams", 
                "map_rams", 
                "gateways", 
                "stashes", 
                "meter_alus", 
                "statistic_alus", 
                "tcams", 
                "action_bus_bytes", 
                "action_slots", 
                "vliw", 
                "logical_tables"
            ], 
            "type": "object", 
            "properties": {
                "hash_bits": {
                    "$ref": "#/definitions/HashBitsResourceUsage"
                }, 
                "xbar_bytes": {
                    "$ref": "#/definitions/XbarResourceUsage"
                }, 
                "statistic_alus": {
                    "$ref": "#/definitions/StatisticAluResourceUsage"
                }, 
                "action_bus_bytes": {
                    "$ref": "#/definitions/ActionDataResourceUsage"
                }, 
                "map_rams": {
                    "$ref": "#/definitions/MapRamResourceUsage"
                }, 
                "hash_distribution_units": {
                    "$ref": "#/definitions/HashDistributionResourceUsage"
                }, 
                "rams": {
                    "$ref": "#/definitions/RamResourceUsage"
                }, 
                "vliw": {
                    "$ref": "#/definitions/VliwResourceUsage"
                }, 
                "logical_tables": {
                    "$ref": "#/definitions/LogicalTableResourceUsage"
                }, 
                "gateways": {
                    "$ref": "#/definitions/GatewayResourceUsage"
                }, 
                "stashes": {
                    "$ref": "#/definitions/StashResourceUsage"
                }, 
                "stage_number": {
                    "type": "integer", 
                    "description": "MAU stage number."
                }, 
                "action_slots": {
                    "items": {
                        "$ref": "#/definitions/ActionSlotUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of action data bus slot utilization information."
                }, 
                "tcams": {
                    "$ref": "#/definitions/TcamResourceUsage"
                }, 
                "meter_alus": {
                    "$ref": "#/definitions/MeterAluResourceUsage"
                }
            }
        }, 
        "ALPMMatchTableAttr": {
            "additionalProperties": false, 
            "required": [
                "match_type", 
                "pre_classifier", 
                "atcam_table", 
                "bins_per_partition", 
                "max_subtrees_per_partition", 
                "partition_field_name", 
                "lpm_field_name", 
                "set_partition_action_handle"
            ], 
            "type": "object", 
            "properties": {
                "match_type": {
                    "enum": [
                        "algorithmic_lpm"
                    ], 
                    "type": "string", 
                    "description": "Type of match table."
                }, 
                "max_subtrees_per_partition": {
                    "type": "integer", 
                    "description": "Maximum number of subtrees in a given ALPM partition."
                }, 
                "atcam_table": {
                    "$ref": "#/definitions/MatchTable"
                }, 
                "partition_field_name": {
                    "type": "string", 
                    "description": "The name of the partition field. Usually, this is defaulted by the compiler to some known value."
                }, 
                "lpm_field_name": {
                    "type": "string", 
                    "description": "Name of the field that is being matched against."
                }, 
                "pre_classifier": {
                    "$ref": "#/definitions/MatchTable"
                }, 
                "bins_per_partition": {
                    "type": "integer", 
                    "description": "Number of entries per partition in the ALPM table."
                }, 
                "set_partition_action_handle": {
                    "type": "integer", 
                    "description": "Handle of the set partition action for this ALPM table."
                }, 
                "stage_tables": {
                    "type": "array", 
                    "maxItems": 0
                }
            }
        }, 
        "HashDistributionUnitUsage": {
            "additionalProperties": false, 
            "required": [
                "hash_id", 
                "unit_id", 
                "usages"
            ], 
            "type": "object", 
            "properties": {
                "usages": {
                    "items": {
                        "$ref": "#/definitions/ElementUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of how this hash distribution unit is used."
                }, 
                "unit_id": {
                    "enum": [
                        0, 
                        1, 
                        2
                    ], 
                    "type": "integer", 
                    "description": "Hash distribution unit ID in this hash function."
                }, 
                "hash_id": {
                    "enum": [
                        0, 
                        1
                    ], 
                    "type": "integer", 
                    "description": "Hash function ID.  Hash distribution can connect to up to 2 of the 8 hash functions."
                }
            }
        }, 
        "MemoryResourceAllocation": {
            "additionalProperties": false, 
            "required": [
                "memory_type", 
                "memory_units_and_vpns"
            ], 
            "type": "object", 
            "properties": {
                "spare_bank_memory_unit": {
                    "type": "integer", 
                    "description": "For synthetic two-port tables (stateful, meter, stats, selectors), indicates which memory unit ID is the spare bank initially.  This is used by the driver for initialization."
                }, 
                "memory_units_and_vpns": {
                    "items": {
                        "required": [
                            "memory_units", 
                            "vpns"
                        ], 
                        "type": "object", 
                        "properties": {
                            "memory_units": {
                                "items": {
                                    "type": "integer"
                                }, 
                                "type": "array", 
                                "description": "An array of memory unit IDs.  For SRAMs, the memory unit ID is 12 * row + col.  For TCAMs, the memory unit ID is 12 * col + row.  (The formula difference is not a typo.)  Memory IDs are ordered such that the most significant memory appears at the lower list index."
                            }, 
                            "vpns": {
                                "items": {
                                    "type": "integer"
                                }, 
                                "type": "array", 
                                "description": "An array of VPNs assigned for the match entries packed in these memory units."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "Memory resource allocation information."
                }, 
                "memory_type": {
                    "enum": [
                        "tcam", 
                        "sram", 
                        "map_ram", 
                        "gateway", 
                        "ingress_buffer"
                    ], 
                    "type": "string", 
                    "description": "Type of memory allocated."
                }
            }
        }, 
        "StashUsage": {
            "additionalProperties": false, 
            "required": [
                "row", 
                "unit_id", 
                "usages"
            ], 
            "type": "object", 
            "properties": {
                "usages": {
                    "items": {
                        "$ref": "#/definitions/ElementUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of how this Stash unit is used."
                }, 
                "unit_id": {
                    "enum": [
                        0, 
                        1
                    ], 
                    "type": "integer", 
                    "description": "The unit ID of this stash."
                }, 
                "row": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3, 
                        4, 
                        5, 
                        6, 
                        7
                    ], 
                    "type": "integer", 
                    "description": "The physical row this Stash is on."
                }
            }
        }, 
        "StatisticsStageTable": {
            "additionalProperties": false, 
            "required": [
                "stage_table_type", 
                "stage_number", 
                "logical_table_id", 
                "size", 
                "memory_resource_allocation", 
                "stats_alu_index"
            ], 
            "type": "object", 
            "properties": {
                "stats_alu_index": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3
                    ], 
                    "type": "integer", 
                    "description": "An integer that indicates the statistics ALU used.  0 is on row 0, 1 on row 2, 2 on row 4 and 3 on row 6."
                }, 
                "memory_resource_allocation": {
                    "oneOf": [
                        {
                            "type": "null"
                        }, 
                        {
                            "$ref": "#/definitions/MemoryResourceAllocation"
                        }
                    ], 
                    "description": "Representation of the Memory resource allocation for this stage table."
                }, 
                "pack_format": {
                    "items": {
                        "required": [
                            "memory_word_width", 
                            "table_word_width", 
                            "entries_per_table_word", 
                            "number_memory_units_per_table_word"
                        ], 
                        "type": "object", 
                        "description": "Structure containing information about how the memory for this stage table is layed out.", 
                        "properties": {
                            "memory_word_width": {
                                "type": "integer", 
                                "description": "Bit width of a single physical memory word."
                            }, 
                            "table_word_width": {
                                "type": "integer", 
                                "description": "Bit width of the table's word."
                            }, 
                            "entries_per_table_word": {
                                "type": "integer", 
                                "description": "Number of entries that are packed into a given table word."
                            }, 
                            "number_memory_units_per_table_word": {
                                "type": "integer", 
                                "description": "Number of units combined together to form a single table word. Notice that for table words that occupy multiple memory units, the most significant bits of the table word are found in the lowest indexed memory unit."
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "logical_table_id": {
                    "type": "integer", 
                    "description": "Unique identifier for this logical table within this stage."
                }, 
                "stage_table_type": {
                    "enum": [
                        "statistics"
                    ], 
                    "type": "string", 
                    "description": "Type of stage table."
                }, 
                "stage_number": {
                    "type": "integer", 
                    "description": "Number identifying the stage containing this stage table."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Number of entries in this stage table."
                }
            }
        }, 
        "ActionSlotUsage": {
            "additionalProperties": false, 
            "required": [
                "slot_bit_width", 
                "maximum_slots", 
                "number_used"
            ], 
            "type": "object", 
            "properties": {
                "maximum_slots": {
                    "type": "integer", 
                    "description": "Maximum number of available slots of this size."
                }, 
                "number_used": {
                    "type": "integer", 
                    "description": "The number of slots of this size in use."
                }, 
                "slot_bit_width": {
                    "enum": [
                        8, 
                        16, 
                        32
                    ], 
                    "type": "integer", 
                    "description": "Action data bus slot bit width."
                }
            }
        }, 
        "ParserResources": {
            "additionalProperties": false, 
            "required": [
                "nParsers", 
                "parsers"
            ], 
            "type": "object", 
            "properties": {
                "parsers": {
                    "items": {
                        "$ref": "#/definitions/ParserResourceUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of parser resource utilization information."
                }, 
                "nParsers": {
                    "type": "integer", 
                    "description": "Total number of parsers"
                }
            }
        }, 
        "ATCAMMemoryResourceAllocation": {
            "additionalProperties": false, 
            "required": [
                "column_priority", 
                "memory_units_and_vpns"
            ], 
            "type": "object", 
            "properties": {
                "column_priority": {
                    "type": "integer", 
                    "description": "Priority for this column. A lower value means higher priority."
                }, 
                "memory_units_and_vpns": {
                    "items": {
                        "required": [
                            "memory_units", 
                            "vpns"
                        ], 
                        "type": "object", 
                        "properties": {
                            "memory_units": {
                                "items": {
                                    "type": "integer"
                                }, 
                                "type": "array", 
                                "description": "An array of memory unit IDs.  For SRAMs, the memory unit ID is 12 * row + col.  For TCAMs, the memory unit ID is 12 * col + row.  (The formula difference is not a typo.)  Memory IDs are ordered such that the most significant memory appears at the lower list index."
                            }, 
                            "vpns": {
                                "items": {
                                    "type": "integer"
                                }, 
                                "type": "array", 
                                "description": "An array of VPNs assigned for the match entries packed in these memory units."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "Array of bins of 1024 partitions that constitute a column."
                }
            }
        }, 
        "PVS": {
            "additionalProperties": false, 
            "required": [
                "parser_name", 
                "parser_state_id", 
                "uses_pvs", 
                "tcam_rows", 
                "match_registers"
            ], 
            "type": "object", 
            "properties": {
                "parser_state_id": {
                    "type": "integer", 
                    "description": "Compiler-assigned parser state ID.  Allowed values are 0 to 255."
                }, 
                "tcam_rows": {
                    "items": {
                        "type": "integer"
                    }, 
                    "type": "array", 
                    "description": "An array of parser TCAM rows that are used by this parse state."
                }, 
                "pvs_name": {
                    "type": "string", 
                    "description": "Name of this PVS."
                }, 
                "parser_name": {
                    "type": "string", 
                    "description": "P4 parser state name."
                }, 
                "pvs_handle": {
                    "type": "integer", 
                    "description": "Unique identifier for the parser value set."
                }, 
                "uses_pvs": {
                    "type": "boolean", 
                    "description": "Boolean indicating if this parser state uses a parser value set."
                }, 
                "match_registers": {
                    "items": {
                        "required": [
                            "container_width", 
                            "mask", 
                            "container_hardware_id", 
                            "field_mapping"
                        ], 
                        "type": "object", 
                        "description": "Parser match register properties.", 
                        "properties": {
                            "container_width": {
                                "enum": [
                                    8, 
                                    16
                                ], 
                                "type": "integer", 
                                "description": "The bit width of the match register.  ID 0 must have a value of 16.  IDs 2 and 3 must have a value of 8."
                            }, 
                            "mask": {
                                "type": "integer", 
                                "description": "An integer containing the mask corresponding to which bits are matched against from the P4 program, and which ones are don't care."
                            }, 
                            "container_hardware_id": {
                                "enum": [
                                    0, 
                                    2, 
                                    3
                                ], 
                                "type": "integer", 
                                "description": "The hardware ID of a parser match extractor.  Allowed values correspond to the byte in the 32-bit match window.  ID 0 is the 16-bit match register.  ID 2 is the first 8-bit match register, and ID 3 is the second 8-bit match register."
                            }, 
                            "field_mapping": {
                                "items": {
                                    "required": [
                                        "register_bit", 
                                        "field_name", 
                                        "start_bit", 
                                        "select_statement_bit"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "register_bit": {
                                            "type": "integer", 
                                            "description": "The register bit in the parser match register, indexed from the least significant position."
                                        }, 
                                        "field_name": {
                                            "type": "string", 
                                            "description": "The name of the field."
                                        }, 
                                        "start_bit": {
                                            "type": "integer", 
                                            "description": "A particular bit of the field, indexed from the least significant position."
                                        }, 
                                        "select_statement_bit": {
                                            "type": "integer", 
                                            "description": "The select bit position from the P4 select statement, indexed from the least significant position."
                                        }
                                    }
                                }, 
                                "type": "array", 
                                "description": "List of parser select statement mapping into this match register"
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "An array of parser match registers in use by this parser value set."
                }
            }
        }, 
        "TcamUsage": {
            "additionalProperties": false, 
            "required": [
                "row", 
                "column", 
                "usages"
            ], 
            "type": "object", 
            "properties": {
                "column": {
                    "enum": [
                        0, 
                        1
                    ], 
                    "type": "integer", 
                    "description": "The physical column this TCAM is on."
                }, 
                "usages": {
                    "items": {
                        "$ref": "#/definitions/ElementUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of how this TCAM unit is used."
                }, 
                "row": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3, 
                        4, 
                        5, 
                        6, 
                        7, 
                        8, 
                        9, 
                        10, 
                        11
                    ], 
                    "type": "integer", 
                    "description": "The physical row this TCAM is on."
                }
            }
        }, 
        "StashAllocation": {
            "additionalProperties": false, 
            "required": [
                "num_stash_entries", 
                "stash_entries"
            ], 
            "type": "object", 
            "properties": {
                "pack_format": {
                    "items": {
                        "required": [
                            "memory_word_width", 
                            "table_word_width", 
                            "entries", 
                            "entries_per_table_word", 
                            "number_memory_units_per_table_word"
                        ], 
                        "type": "object", 
                        "description": "Structure containing information about how the stash for this stage table is layed out.", 
                        "properties": {
                            "memory_word_width": {
                                "type": "integer", 
                                "description": "Bit width of a single physical stash word."
                            }, 
                            "table_word_width": {
                                "type": "integer", 
                                "description": "Bit width of the stash word.  Note that this can be less than the corresponding exact match table's word width."
                            }, 
                            "number_memory_units_per_table_word": {
                                "type": "integer", 
                                "description": "Number of units combined together to form a single table word. Notice that for table words that occupy multiple memory units, the most significant bits of the table word are found in the lowest indexed memory unit."
                            }, 
                            "entries_per_table_word": {
                                "type": "integer", 
                                "description": "Number of entries that are packed into a given table word.  For stashes, this can only be 1."
                            }, 
                            "entries": {
                                "items": {
                                    "additionalProperties": false, 
                                    "required": [
                                        "entry_number", 
                                        "fields"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "entry_number": {
                                            "type": "integer", 
                                            "description": "Entry number uniquely identifying this entry."
                                        }, 
                                        "fields": {
                                            "items": {
                                                "required": [
                                                    "lsb_mem_word_offset", 
                                                    "source", 
                                                    "start_bit", 
                                                    "msb_mem_word_idx", 
                                                    "lsb_mem_word_idx", 
                                                    "field_width", 
                                                    "field_name", 
                                                    "enable_pfe"
                                                ], 
                                                "type": "object", 
                                                "properties": {
                                                    "start_bit": {
                                                        "type": "integer", 
                                                        "description": "A field could be split in multiple slices. Corresponds to the offset, from the least significant bit, where this slice starts."
                                                    }, 
                                                    "immediate_name": {
                                                        "type": "string", 
                                                        "description": "Name of the [source] field, if it was an IMMEDIATE source."
                                                    }, 
                                                    "field_width": {
                                                        "type": "integer", 
                                                        "description": "Width of a field, in bits."
                                                    }, 
                                                    "lsb_mem_word_idx": {
                                                        "type": "integer", 
                                                        "description": "Index of the wide word containing the least significant bit of this field."
                                                    }, 
                                                    "match_mode": {
                                                        "enum": [
                                                            "exact", 
                                                            "s0q1", 
                                                            "s1q0", 
                                                            "unused"
                                                        ], 
                                                        "type": "string", 
                                                        "description": "Indicates the how the hardware is configured to match on this region.  Only applicable when the source is SPEC and for ATCAM tables."
                                                    }, 
                                                    "source": {
                                                        "enum": [
                                                            "zero", 
                                                            "version", 
                                                            "instr", 
                                                            "adt_ptr", 
                                                            "meter_ptr", 
                                                            "stats_ptr", 
                                                            "stful_ptr", 
                                                            "sel_ptr", 
                                                            "next_table", 
                                                            "selection_length", 
                                                            "selection_length_shift", 
                                                            "proxy_hash", 
                                                            "spec", 
                                                            "immediate"
                                                        ], 
                                                        "type": "string", 
                                                        "description": "Type of source that originated this entry."
                                                    }, 
                                                    "msb_mem_word_idx": {
                                                        "type": "integer", 
                                                        "description": "Index of the wide word containing the most significant bit of this field."
                                                    }, 
                                                    "lsb_mem_word_offset": {
                                                        "type": "integer", 
                                                        "description": "Offset, within a table word, corresponding to the start of this field, starting from the least significant bit."
                                                    }, 
                                                    "field_name": {
                                                        "type": "string", 
                                                        "description": "Name of this field."
                                                    }, 
                                                    "enable_pfe": {
                                                        "type": "boolean", 
                                                        "description": "Whether to enable or disable per flow enable functionality on this entry."
                                                    }
                                                }
                                            }, 
                                            "type": "array"
                                        }
                                    }
                                }, 
                                "type": "array", 
                                "description": "Entries packed in this stash."
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "stash_entries": {
                    "items": {
                        "items": {
                            "required": [
                                "stash_entry_id", 
                                "stash_hashbank_select", 
                                "stash_match_data_select", 
                                "hash_function_id"
                            ], 
                            "type": "object", 
                            "description": "Properties for this unit of stash entry width.  There is no guarantee that allocation will result in the same input and output bus IDs will be used on each physical row.", 
                            "properties": {
                                "stash_entry_id": {
                                    "type": "integer", 
                                    "description": "The physical IDs of the stash entries in use for one potentially wide word entry.  IDs are arranged with most significant part of the stash entry in the lowest index."
                                }, 
                                "stash_hashbank_select": {
                                    "enum": [
                                        0, 
                                        1
                                    ], 
                                    "type": "integer", 
                                    "description": "Indicates which hash input on the physical row is input to these stash entries."
                                }, 
                                "stash_match_data_select": {
                                    "enum": [
                                        0, 
                                        1
                                    ], 
                                    "type": "integer", 
                                    "description": "Indicates which match data search bus on the physical row is input to this subsection of a stash entry."
                                }, 
                                "hash_function_id": {
                                    "enum": [
                                        0, 
                                        1
                                    ], 
                                    "type": "integer", 
                                    "description": "The hash function ID these stash entries correspond to.  There can be at most two hash functions for an exact match table.  The second hash function is for additional ways."
                                }
                            }
                        }, 
                        "type": "array"
                    }, 
                    "type": "array", 
                    "description": "Structure containing information about how the stash for this stage table is layed out."
                }, 
                "num_stash_entries": {
                    "type": "integer", 
                    "description": "The number of wide-word stash entries available."
                }
            }
        }, 
        "HashActionTableAttr": {
            "additionalProperties": false, 
            "required": [
                "match_type", 
                "stage_tables"
            ], 
            "type": "object", 
            "properties": {
                "stage_tables": {
                    "items": {
                        "$ref": "#/definitions/HashActionStageTable"
                    }, 
                    "type": "array", 
                    "description": "An array of stage-specific resource objects for this match table. Keyless match tables should have only one of these."
                }, 
                "match_type": {
                    "enum": [
                        "hash_action"
                    ], 
                    "type": "string", 
                    "description": "Type of match table."
                }
            }
        }, 
        "TcamResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "nRows", 
                "nColumns", 
                "tcams"
            ], 
            "type": "object", 
            "properties": {
                "nRows": {
                    "type": "integer", 
                    "description": "Total number of rows."
                }, 
                "nColumns": {
                    "type": "integer", 
                    "description": "Total number of columns."
                }, 
                "tcams": {
                    "items": {
                        "$ref": "#/definitions/TcamUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of used TCAMs."
                }
            }
        }, 
        "VliwResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "size", 
                "instructions"
            ], 
            "type": "object", 
            "properties": {
                "instructions": {
                    "items": {
                        "$ref": "#/definitions/VliwUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of used VLIW instructions."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Total number of instructions."
                }
            }
        }, 
        "DeparserResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "gress"
            ], 
            "type": "object", 
            "properties": {
                "gress": {
                    "enum": [
                        "ingress", 
                        "egress"
                    ], 
                    "type": "string", 
                    "description": "The gress this deparser belongs to."
                }
            }
        }, 
        "ReferencedTable": {
            "additionalProperties": false, 
            "required": [
                "name", 
                "handle", 
                "how_referenced"
            ], 
            "type": "object", 
            "properties": {
                "how_referenced": {
                    "enum": [
                        "direct", 
                        "indirect"
                    ], 
                    "type": "string", 
                    "description": "Whether the table is directly or indirectly referenced."
                }, 
                "handle": {
                    "type": "integer", 
                    "description": "Handle of the referenced table."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the referenced table."
                }
            }
        }, 
        "MeterAluResourceUsage": {
            "additionalProperties": false, 
            "required": [
                "nAlus", 
                "meters"
            ], 
            "type": "object", 
            "properties": {
                "nAlus": {
                    "type": "integer", 
                    "description": "Total number of ALUs."
                }, 
                "meters": {
                    "items": {
                        "$ref": "#/definitions/MeterAluUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of used Meter ALUs."
                }
            }
        }, 
        "Phase0MatchStageTable": {
            "additionalProperties": false, 
            "required": [
                "stage_table_type", 
                "stage_number", 
                "size", 
                "memory_resource_allocation"
            ], 
            "type": "object", 
            "properties": {
                "memory_resource_allocation": {
                    "oneOf": [
                        {
                            "type": "null"
                        }, 
                        {
                            "$ref": "#/definitions/MemoryResourceAllocation"
                        }
                    ], 
                    "description": "Representation of the Memory resource allocation for this stage table."
                }, 
                "pack_format": {
                    "items": {
                        "required": [
                            "memory_word_width", 
                            "table_word_width", 
                            "entries_per_table_word", 
                            "number_memory_units_per_table_word"
                        ], 
                        "type": "object", 
                        "description": "Structure containing information about how the memory for this stage table is layed out.", 
                        "properties": {
                            "memory_word_width": {
                                "type": "integer", 
                                "description": "Bit width of a single physical memory word."
                            }, 
                            "table_word_width": {
                                "type": "integer", 
                                "description": "Bit width of the table's word."
                            }, 
                            "number_memory_units_per_table_word": {
                                "type": "integer", 
                                "description": "Number of units combined together to form a single table word. Notice that for table words that occupy multiple memory units, the most significant bits of the table word are found in the lowest indexed memory unit."
                            }, 
                            "entries_per_table_word": {
                                "type": "integer", 
                                "description": "Number of entries that are packed into a given table word."
                            }, 
                            "entries": {
                                "type": "array"
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "logical_table_id": {
                    "type": "integer", 
                    "description": "Unique identifier for this stage table within the stage. This is not required for Phase0."
                }, 
                "stage_table_type": {
                    "enum": [
                        "phase_0_match"
                    ], 
                    "type": "string", 
                    "description": "Type of exact match stage table."
                }, 
                "stage_number": {
                    "type": "integer", 
                    "description": "Number identifying the stage containing this stage table."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Number of entries in this stage table."
                }
            }
        }, 
        "GatewayUsage": {
            "additionalProperties": false, 
            "required": [
                "row", 
                "unit_id", 
                "usages"
            ], 
            "type": "object", 
            "properties": {
                "usages": {
                    "items": {
                        "$ref": "#/definitions/ElementUsage"
                    }, 
                    "type": "array", 
                    "description": "Array of how this Gateway unit is used."
                }, 
                "unit_id": {
                    "enum": [
                        0, 
                        1
                    ], 
                    "type": "integer", 
                    "description": "The unit ID of this Gateway."
                }, 
                "row": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3, 
                        4, 
                        5, 
                        6, 
                        7
                    ], 
                    "type": "integer", 
                    "description": "The physical row this Gateway is on."
                }
            }
        }, 
        "SelectionStageTable": {
            "additionalProperties": false, 
            "required": [
                "stage_table_type", 
                "stage_number", 
                "logical_table_id", 
                "size", 
                "memory_resource_allocation", 
                "meter_alu_index"
            ], 
            "type": "object", 
            "properties": {
                "meter_alu_index": {
                    "enum": [
                        0, 
                        1, 
                        2, 
                        3
                    ], 
                    "type": "integer", 
                    "description": "An integer that indicates the meter ALU used.  0 is on row 1, 1 on row 3, 2 on row 5 and 3 on row 7."
                }, 
                "memory_resource_allocation": {
                    "oneOf": [
                        {
                            "type": "null"
                        }, 
                        {
                            "$ref": "#/definitions/MemoryResourceAllocation"
                        }
                    ], 
                    "description": "Representation of the Memory resource allocation for this stage table."
                }, 
                "pack_format": {
                    "items": {
                        "required": [
                            "memory_word_width", 
                            "table_word_width", 
                            "entries_per_table_word", 
                            "number_memory_units_per_table_word"
                        ], 
                        "type": "object", 
                        "description": "Structure containing information about how the memory for this stage table is layed out.", 
                        "properties": {
                            "memory_word_width": {
                                "type": "integer", 
                                "description": "Bit width of a single physical memory word."
                            }, 
                            "table_word_width": {
                                "type": "integer", 
                                "description": "Bit width of the table's word."
                            }, 
                            "entries_per_table_word": {
                                "type": "integer", 
                                "description": "Number of entries that are packed into a given table word."
                            }, 
                            "number_memory_units_per_table_word": {
                                "type": "integer", 
                                "description": "Number of units combined together to form a single table word. Notice that for table words that occupy multiple memory units, the most significant bits of the table word are found in the lowest indexed memory unit."
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "logical_table_id": {
                    "type": "integer", 
                    "description": "Unique identifier for this logical table within this stage."
                }, 
                "stage_table_type": {
                    "enum": [
                        "selection"
                    ], 
                    "type": "string", 
                    "description": "Type of stage table."
                }, 
                "stage_number": {
                    "type": "integer", 
                    "description": "Number identifying the stage containing this stage table."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Number of entries in this stage table."
                }
            }
        }, 
        "ExactMatchTableAttr": {
            "additionalProperties": false, 
            "required": [
                "match_type", 
                "uses_dynamic_key_masks", 
                "stage_tables"
            ], 
            "type": "object", 
            "properties": {
                "match_type": {
                    "enum": [
                        "exact"
                    ], 
                    "type": "string", 
                    "description": "Type of match table."
                }, 
                "uses_dynamic_key_masks": {
                    "type": "boolean", 
                    "description": "Whether this table can use dynamic key masks or not."
                }, 
                "stage_tables": {
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/HashMatchStageTable"
                            }, 
                            {
                                "$ref": "#/definitions/HashActionStageTable"
                            }, 
                            {
                                "$ref": "#/definitions/ProxyHashMatchStageTable"
                            }, 
                            {
                                "$ref": "#/definitions/DirectMatchStageTable"
                            }
                        ]
                    }, 
                    "type": "array", 
                    "description": "An array of stage-specific resource objects for this match table."
                }, 
                "prefix_upper": {
                    "type": "integer", 
                    "description": "Maximum prefix length to be used. Only applicable if this table is also a CLPM Unit."
                }, 
                "prefix_length": {
                    "type": "integer", 
                    "description": "Bit width of the prefix field. Only applicable if this table is also a CLPM unit."
                }, 
                "prefix_lower": {
                    "type": "integer", 
                    "description": "Minimum prefix length to be used. Only applicable if this table is also a CLPM Unit."
                }
            }
        }, 
        "MatchWithNoKeyStageTable": {
            "additionalProperties": false, 
            "required": [
                "stage_table_type", 
                "stage_number", 
                "logical_table_id", 
                "size", 
                "memory_resource_allocation", 
                "result_physical_buses", 
                "has_attached_gateway", 
                "default_next_table", 
                "action_format"
            ], 
            "type": "object", 
            "properties": {
                "default_next_table": {
                    "oneOf": [
                        {
                            "type": "integer"
                        }, 
                        {
                            "type": "null"
                        }
                    ], 
                    "description": "Full address of the default next table, if any."
                }, 
                "has_attached_gateway": {
                    "type": "boolean", 
                    "description": "A Boolean indicating if this stage table has an attached gateway."
                }, 
                "action_format": {
                    "items": {
                        "$ref": "#/definitions/ActionHandleFormat"
                    }, 
                    "type": "array", 
                    "description": "List of action handles for this exact match stage table."
                }, 
                "memory_resource_allocation": {
                    "oneOf": [
                        {
                            "type": "null"
                        }, 
                        {
                            "$ref": "#/definitions/MemoryResourceAllocation"
                        }
                    ], 
                    "description": "Representation of the Memory resource allocation for this stage table."
                }, 
                "pack_format": {
                    "items": {
                        "required": [
                            "memory_word_width", 
                            "table_word_width", 
                            "entries_per_table_word", 
                            "number_memory_units_per_table_word"
                        ], 
                        "type": "object", 
                        "description": "Structure containing information about how the memory for this stage table is layed out.", 
                        "properties": {
                            "memory_word_width": {
                                "type": "integer", 
                                "description": "Bit width of a single physical memory word."
                            }, 
                            "table_word_width": {
                                "type": "integer", 
                                "description": "Bit width of the table's word."
                            }, 
                            "entries_per_table_word": {
                                "type": "integer", 
                                "description": "Number of entries that are packed into a given table word."
                            }, 
                            "number_memory_units_per_table_word": {
                                "type": "integer", 
                                "description": "Number of units combined together to form a single table word. Notice that for table words that occupy multiple memory units, the most significant bits of the table word are found in the lowest indexed memory unit."
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "result_physical_buses": {
                    "items": {
                        "type": "integer"
                    }, 
                    "type": "array", 
                    "description": "An array of integers corresponding to the physical bus numbers used by this stage table. This information is required for snapshot."
                }, 
                "logical_table_id": {
                    "type": "integer", 
                    "description": "Unique identifier for this logical table within this stage."
                }, 
                "stage_table_type": {
                    "enum": [
                        "match_with_no_key"
                    ], 
                    "type": "string", 
                    "description": "Type of exact match stage table."
                }, 
                "stage_number": {
                    "type": "integer", 
                    "description": "Number identifying the stage containing this stage table."
                }, 
                "size": {
                    "type": "integer", 
                    "description": "Number of entries in this stage table."
                }
            }
        }
    }, 
    "$schema": "http://json-schema.org/draft-04/schema#", 
    "required": [
        "program_name", 
        "build_date", 
        "run_id", 
        "compiler_version", 
        "schema_version", 
        "tables", 
        "phv_allocation", 
        "learn_quanta", 
        "dynamic_hash_calculations", 
        "configuration_cache", 
        "driver_options"
    ], 
    "type": "object", 
    "properties": {
        "tables": {
            "items": {
                "anyOf": [
                    {
                        "$ref": "#/definitions/MatchTable"
                    }, 
                    {
                        "$ref": "#/definitions/SelectionTable"
                    }, 
                    {
                        "$ref": "#/definitions/StatisticsTable"
                    }, 
                    {
                        "$ref": "#/definitions/ActionDataTable"
                    }, 
                    {
                        "$ref": "#/definitions/MeterTable"
                    }, 
                    {
                        "$ref": "#/definitions/StatefulTable"
                    }, 
                    {
                        "$ref": "#/definitions/ConditionTable"
                    }
                ], 
                "description": "Possible types of tables in this program."
            }, 
            "type": "array", 
            "description": "List of tables and their specifications in this P4 program."
        }, 
        "parser": {
            "$ref": "#/definitions/Parser"
        }, 
        "phv_allocation": {
            "items": {
                "$ref": "#/definitions/PHVStageAllocation"
            }, 
            "type": "array", 
            "description": "PHV allocation context for a given stage."
        }, 
        "compiler_version": {
            "type": "string", 
            "description": "Compiler version used in compilation."
        }, 
        "build_date": {
            "type": "string", 
            "description": "Timestamp of when the program was built."
        }, 
        "configuration_cache": {
            "items": {
                "$ref": "#/definitions/ConfigurationValue"
            }, 
            "type": "array", 
            "description": "Cached configuration values."
        }, 
        "run_id": {
            "type": "string", 
            "description": "Unique ID for this compile run."
        }, 
        "egress_packet_length_adjust": {
            "$ref": "#/definitions/EgressPacketLengthAdjust"
        }, 
        "schema_version": {
            "type": "string", 
            "description": "Schema version used to produce this JSON."
        }, 
        "dynamic_hash_calculations": {
            "items": {
                "$ref": "#/definitions/DynamicHashCalculation"
            }, 
            "type": "array", 
            "description": "Dynamic hash calculation context information."
        }, 
        "driver_options": {
            "required": [
                "hash_parity_enabled"
            ], 
            "type": "object", 
            "description": "Supplemental information required by the driver.", 
            "properties": {
                "hash_parity_enabled": {
                    "type": "boolean", 
                    "description": "Boolean indicating if hash parity errors will generate interrupts."
                }, 
                "high_availability_enabled": {
                    "type": "boolean", 
                    "description": "Boolean indicating if the compiler allocated resources to support high availability."
                }
            }
        }, 
        "learn_quanta": {
            "items": {
                "$ref": "#/definitions/LearnQuanta"
            }, 
            "type": "array", 
            "description": "LearnQuanta context information."
        }, 
        "program_name": {
            "type": "string", 
            "description": "Name of the compiled program."
        }, 
        "resources": {
            "$ref": "#/definitions/ResourceUsage"
        }
    }
}